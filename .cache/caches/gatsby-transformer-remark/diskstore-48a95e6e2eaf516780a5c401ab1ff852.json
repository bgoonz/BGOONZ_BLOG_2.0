{"expireTime":9007200881132595000,"key":"transformer-remark-markdown-html-2558cafb1f91af6df228ae192e47f84f--","val":"<h1>Introduction to React for Complete Beginners</h1>\n<p>All of the code examples below will be included a second time at the bottom of this article as an embedded gist.</p>\n<hr>\n<h3>Introduction to React for Complete Beginners</h3>\n<p>All of the code examples below will be included a second time at the bottom of this article as an embedded gist, so that it is properly syntax highlighted.</p>\n<p>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*Olfj44MF6WSzvlSM.png\" class=\"graf-image\" /></figure>\n<h3>React</h3>\n<blockquote>\n<p><em>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript</em></p>\n</blockquote>\n<blockquote>\n<p><em>because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX</em></p>\n</blockquote>\n<blockquote>\n<p><em>include the code you want to be treated as JavaScript within curly braces: { ‘this is treated as JavaScript code’ }</em></p>\n</blockquote>\n<blockquote>\n<p><em>JSX code must be compiled into JavaScript</em></p>\n</blockquote>\n<blockquote>\n<p><em>under the hood the challenges are calling ReactDOM.render (JSX, document.getElementById(‘root’))</em></p>\n</blockquote>\n<blockquote>\n<p><em>One important thing to know about nested JSX is that it must return a single element.</em></p>\n</blockquote>\n<blockquote>\n<p><em>For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.</em></p>\n</blockquote>\n<hr>\n<h3>From the React Docs:</h3>\n<h3>What is React?</h3>\n<p>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.</p>\n<p>React has a few different kinds of components, but we’ll start with <code>React.Component</code> subclasses:</p>\n<pre><code>class ShoppingList extends React.Component {\n  render() {\n    return (\n      &#x3C;div className=\"shopping-list\">\n        &#x3C;h1>Shopping List for {this.props.name}&#x3C;/h1>\n        &#x3C;ul>\n          &#x3C;li>Instagram&#x3C;/li>\n          &#x3C;li>WhatsApp&#x3C;/li>\n          &#x3C;li>Oculus&#x3C;/li>\n        &#x3C;/ul>\n      &#x3C;/div>\n    );\n  }\n}\n\n// Example usage: &#x3C;ShoppingList name=\"Mark\" />\n</code></pre>\n<p>We’ll get to the funny XML-like tags soon. We use components to tell React what we want to see on the screen. When our data changes, React will efficiently update and re-render our components.</p>\n<p>Here, ShoppingList is a <strong>React component class</strong>, or <strong>React component type</strong>. A component takes in parameters, called <code>props</code> (short for “properties”), and returns a hierarchy of views to display via the <code>render</code> method.</p>\n<p>The <code>render</code> method returns a <em>description</em> of what you want to see on the screen. React takes the description and displays the result. In particular, <code>render</code> returns a <strong>React element</strong>, which is a lightweight description of what to render. Most React developers use a special syntax called “JSX” which makes these structures easier to write. The <code>&#x3C;div /></code> syntax is transformed at build time to <code>React.createElement('div')</code>. The example above is equivalent to:</p>\n<pre><code>return React.createElement('div', {className: 'shopping-list'},\n  React.createElement('h1', /* ... h1 children ... */),\n  React.createElement('ul', /* ... ul children ... */)\n);\n</code></pre>\n<hr>\n<h3>Valid JSX:</h3>\n<pre><code>&#x3C;div>\n  &#x3C;p>Paragraph One&#x3C;/p>\n  &#x3C;p>Paragraph Two&#x3C;/p>\n  &#x3C;p>Paragraph Three&#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<hr>\n<h3>Invalid JSX:</h3>\n<pre><code>&#x3C;p>Paragraph One&#x3C;/p>\n&#x3C;p>Paragraph Two&#x3C;/p>\n&#x3C;p>Paragraph Three&#x3C;/p>\n</code></pre>\n<h4>To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.</h4>\n<p>To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.</p>\n<p>The code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided div element, without modifying the existing h1 or p elements.</p>\n<pre><code>const JSX = (\n  &#x3C;div>\n  {/* This is a comment */}\n    &#x3C;h1>This is a block of JSX&#x3C;/h1>\n    &#x3C;p>Here's a subtitle&#x3C;/p>\n  &#x3C;/div>\n);\n</code></pre>\n<hr>\n<blockquote>\n<p><em>With React, we can render this JSX directly to the HTML DOM using React’s rendering API known as ReactDOM.</em></p>\n</blockquote>\n<blockquote>\n<p><em>ReactDOM offers a simple method to render React elements to the DOM which looks like this:</em></p>\n</blockquote>\n<p><code>ReactDOM.render(componentToRender, targetNode)</code></p>\n<ul>\n<li><span id=\"f724\">the first argument is the React element or component that you want to render,</span></li>\n<li><span id=\"7093\">and the second argument is the DOM node that you want to render the component to.</span></li>\n</ul>\n<blockquote>\n<p><em>ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them.</em></p>\n</blockquote>\n<blockquote>\n<p><em>key difference in JSX is that you can no longer use the word class to define HTML classes.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"aafc\">— -> This is because class is a reserved word in JavaScript. Instead, JSX uses className</span></li>\n</ul>\n<blockquote>\n<p><em>the naming convention for all HTML attributes and event references in JSX become camelCase</em></p>\n</blockquote>\n<blockquote>\n<p><em>a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. While this is a subtle difference, it is an important one to keep in mind moving forward.</em></p>\n</blockquote>\n<h3>Apply a class of myDiv to the div provided in the JSX code.</h3>\n<ul>\n<li><span id=\"9500\">The constant JSX should return a div element.</span></li>\n<li><span id=\"8d42\">The div should have a class of myDiv.</span></li>\n</ul>\n<!-- -->\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h1>Add a class to this div&#x3C;/h1>\n  &#x3C;/div>\n);\n</code></pre>\n<h3>Ans:</h3>\n<pre><code>const JSX = (\n  &#x3C;div className=\"myDiv\">\n    &#x3C;h1>Add a class to this div&#x3C;/h1>\n  &#x3C;/div>\n);\n</code></pre>\n<h3>React: Learn About Self-Closing JSX Tags</h3>\n<p>-Another important way in which JSX differs from HTML is in the idea of the self-closing tag.</p>\n<blockquote>\n<p><em>In HTML, almost all tags have both an opening and closing tag:</em> <code>&#x3C;div>&#x3C;/div>;</code> <em>the closing tag always has a forward slash before the tag name that you are closing.</em></p>\n</blockquote>\n<blockquote>\n<p><em>there are special instances in HTML called “self-closing tags”, or tags that don’t require both an opening and closing tag before another tag can start.</em></p>\n</blockquote>\n<blockquote>\n<p><em>For example the line-break tag can be written as</em> <code>&#x3C;br></code> <em>or as</em> <code>&#x3C;br />,</code> <em>but should never be written as</em> <code>&#x3C;br>&#x3C;/br></code><em>, since it doesn't contain any content.</em></p>\n</blockquote>\n<blockquote>\n<p><em>In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed.<br>\nThe line-break tag, for example, must always be written as</em> <code>&#x3C;br /></code> <em>in order to be valid JSX that can be transpiled.<br>\nA</em> <code>&#x3C;div></code><em>, on the other hand, can be written as</em> <code>&#x3C;div /></code><em>or</em><code>&#x3C;div>&#x3C;/div></code><em>.<br>\nThe difference is that in the first syntax version there is no way to include anything in the</em> <code>&#x3C;div /></code><em>.</em></p>\n</blockquote>\n<h3>Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don’t change any of the content — you only need to close tags where they are needed.</h3>\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h2>Welcome to React!&#x3C;/h2> &#x3C;br >\n    &#x3C;p>Be sure to close all tags!&#x3C;/p>\n    &#x3C;hr >\n  &#x3C;/div>\n);\n</code></pre>\n<h3>Ans:</h3>\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h2>Welcome to React!&#x3C;/h2> &#x3C;br />\n    &#x3C;p>Be sure to close all tags!&#x3C;/p>\n    &#x3C;hr />\n  &#x3C;/div>\n);\n</code></pre>\n<hr>\n<h3>React: Create a Stateless Functional Component</h3>\n<blockquote>\n<p><em>There are two ways to create a React component. The first way is to use a JavaScript function.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Defining a component in this way creates a stateless functional component.</em></p>\n</blockquote>\n<blockquote>\n<p><em>think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data.</em></p>\n</blockquote>\n<h4>To create a component with a function, you simply write a JavaScript function that returns either JSX or null</h4>\n<ul>\n<li><span id=\"b514\">React requires your function name to begin with a capital letter.</span></li>\n</ul>\n<blockquote>\n<p><em>Here’s an example of a stateless functional component that assigns an HTML class in JSX:</em></p>\n</blockquote>\n<pre><code>// After being transpiled, the &#x3C;div> will have a CSS class of 'customClass'\nconst DemoComponent = function() {\n  return (\n    &#x3C;div className='customClass' />\n  );\n};\n</code></pre>\n<blockquote>\n<p><em>Because a JSX component represents HTML, you could put several components together to create a more complex HTML page.</em></p>\n</blockquote>\n<h3>The code editor has a function called MyComponent. Complete this function so it returns a single div element which contains some string of text.</h3>\n<p>Note: The text is considered a child of the div element, so you will not be able to use a self-closing tag.</p>\n<pre><code>const MyComponent = function() {\n  // Change code below this line\n\n  // Change code above this line\n}\n</code></pre>\n<h3>ANS:</h3>\n<pre><code>const MyComponent = function() {\n  // Change code below this line\n\nreturn (\n   &#x3C;div> Some Text &#x3C;/div >\n  );\n\n  // Change code above this line\n};\n</code></pre>\n<hr>\n<h3>React: Create a React Component</h3>\n<blockquote>\n<p><em>The other way to define a React component is with the ES6 class syntax. In the following example, Kitten extends React.Component:</em></p>\n</blockquote>\n<pre><code>class Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      &#x3C;h1>Hi&#x3C;/h1>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p><em>This creates an ES6 class Kitten which extends the React.Component class.</em></p>\n</blockquote>\n<blockquote>\n<p><em>So the Kitten class now has access to many useful React features, such as local state and lifecycle hooks.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Also notice the Kitten class has a constructor defined within it that calls super()</em></p>\n</blockquote>\n<blockquote>\n<p><em>It uses super() to call the constructor of the parent class, in this case React.Component</em></p>\n</blockquote>\n<blockquote>\n<p><em>The constructor is a special method used during the initialization of objects that are created with the class keyword. It is best practice to call a component’s constructor with super, and pass props to both.</em></p>\n</blockquote>\n<blockquote>\n<p><em>This makes sure the component is initialized properly. For now, know that it is standard for this code to be included.</em></p>\n</blockquote>\n<h3>MyComponent is defined in the code editor using class syntax. Finish writing the render method so it returns a div element that contains an h1 with the text Hello React!.</h3>\n<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n};\n</code></pre>\n<h3>ANS:</h3>\n<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n return (\n   &#x3C;div>\n      &#x3C;h1>Hello React!&#x3C;/h1>\n      &#x3C;/div>\n    );\n\n    // Change code above this line\n  }\n};\n</code></pre>\n<hr>\n<h3>React: Create a Component with Composition</h3>\n<blockquote>\n<p><em>Imagine you are building an App and have created three components, a Navbar, Dashboard, and Footer.</em></p>\n</blockquote>\n<blockquote>\n<p><em>To compose these components together, you could create an App parent component which renders each of these three components as children. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"000b\">For example, in the render method you could write:</span></li>\n</ul>\n<!-- -->\n<pre><code>return (\n &#x3C;App>\n  &#x3C;Navbar />\n  &#x3C;Dashboard />\n  &#x3C;Footer />\n &#x3C;/App>\n)\n</code></pre>\n<blockquote>\n<p><em>When React encounters a custom HTML tag that references another component (a component name wrapped in &#x3C; /> like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the App component and the Navbar, Dashboard, and Footer.</em></p>\n</blockquote>\n<h3>Challenge:</h3>\n<blockquote>\n<p><em>In the code editor, there is a simple functional component called ChildComponent and a class component called ParentComponent. Compose the two together by rendering the ChildComponent within the ParentComponent. Make sure to close the ChildComponent tag with a forward slash.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"2ed5\">Note:<strong>ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React</strong>.</span></li>\n<li><span id=\"fddd\">However, know that this is just a function.</span></li>\n</ul>\n<!-- -->\n<pre><code>const ChildComponent = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>I am the child&#x3C;/p>\n    &#x3C;/div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>I am the parent&#x3C;/h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<p>⌛The React component should return a single div element.<br>\n⌛The component should return two nested elements.<br>\n⌛The component should return the ChildComponent as its second child.</p>\n<h3>Ans:</h3>\n<pre><code>const ChildComponent = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>I am the child&#x3C;/p>\n    &#x3C;/div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>I am the parent&#x3C;/h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<h3>More Examples:</h3>\n<p>For more content follow me on GitHub:</p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz - Overview</strong><br />\n<em>Web Developer, Electrical Engineer https://bryanguner.medium.com/ https://portfolio42.netlify.app/…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><em>More content at</em> <a href=\"http://plainenglish.io/\" class=\"markup--anchor markup--p-anchor\"><em>plainenglish.io</em></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/8021738aa1ad\">May 19, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/introduction-to-react-for-complete-beginners-8021738aa1ad\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"}