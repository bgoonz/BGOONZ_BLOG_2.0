{"expireTime":9007200881132595000,"key":"transformer-remark-markdown-html-f2723edb2e66f6fde21ea6460a349a83--","val":"<p>The simplest way to read a file in Node.js is to use the <code>fs.readFile()</code> method, passing it the file path, encoding and a callback function that will be called with the file data (and the error):</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\nfs.readFile('/Users/joe/test.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});\n</code></pre>\n<p>Alternatively, you can use the synchronous version <code>fs.readFileSync()</code>:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('/Users/joe/test.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}\n</code></pre>\n<p>Both <code>fs.readFile()</code> and <code>fs.readFileSync()</code> read the full content of the file in memory before returning the data.</p>\n<p>This means that big files are going to have a major impact on your memory consumption and speed of execution of the program.</p>\n<p>In this case, a better option is to read the file content using streams.</p>"}