{"expireTime":9007200881132595000,"key":"transformer-remark-markdown-html-3a7efe686a9b71b18bb1bfe592b050e6--","val":"<h2>Python For JS Developers:</h2>\n<h1>Python Study Guide for a JavaScript Programmer</h1>\n<p>A guide to commands in Python from what you know in JavaScript</p>\n<hr>\n<h3>Python Study Guide for a JavaScript Programmer</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*3V9VOfPk_hrFdbEAd3j-QQ.png\" class=\"graf-image\" /></figure>### Applications of Tutorial & Cheat Sheet Respectivley (At Bottom Of Tutorial):\n<h3>Basics</h3>\n<ul>\n<li><span id=\"f893\"><strong>PEP8</strong>¬†: Python Enhancement Proposals, style-guide for Python.</span></li>\n<li><span id=\"c0bf\"><code>print</code> is the equivalent of <code>console.log</code>.</span></li>\n</ul>\n<blockquote>\n<p>‚Äòprint() == console.log()‚Äô</p>\n</blockquote>\n<h3><code>#</code> is used to make comments in your¬†code.</h3>\n<pre><code>def foo():\n    \"\"\"\n    The foo function does many amazing things that you\n    should not question. Just accept that it exists and\n    use it with caution.\n    \"\"\"\n    secretThing()\n</code></pre>\n<blockquote>\n<p><em>Python has a built in help function that let‚Äôs you see a description of the source code without having to navigate to it‚Ä¶ ‚Äú-SickNasty¬†‚Ä¶ Autor Unknown‚Äù</em></p>\n</blockquote>\n<hr>\n<h3>Numbers</h3>\n<ul>\n<li><span id=\"4060\">Python has three types of numbers:</span></li>\n<li><span id=\"8aef\"><strong>Integer</strong></span></li>\n<li><span id=\"723f\"><strong>Positive and Negative Counting Numbers.</strong></span></li>\n</ul>\n<p>No Decimal Point</p>\n<blockquote>\n<p>Created by a literal non-decimal point number¬†‚Ä¶ <strong>or</strong>¬†‚Ä¶ with the <code>int()</code> constructor.</p>\n</blockquote>\n<pre><code>print(3) # => 3\nprint(int(19)) # => 19\nprint(int()) # => 0\n</code></pre>\n<p><strong>3. Complex Numbers</strong></p>\n<blockquote>\n<p>Consist of a real part and imaginary part.</p>\n</blockquote>\n<h4>Boolean is a subtype of integer in Python.ü§∑‚Äç‚ôÇÔ∏è</h4>\n<blockquote>\n<p>If you came from a background in JavaScript and learned to accept the premise(s) of the following meme‚Ä¶</p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*eC4EvZcv6hhH88jX.png\" class=\"graf-image\" /></figure>Than I am sure you will find the means to suspend your disbelief.\n<pre><code>print(2.24) # => 2.24\nprint(2.) # => 2.0\nprint(float()) # => 0.0\nprint(27e-5) # => 0.00027\n</code></pre>\n<h3>KEEP IN¬†MIND:</h3>\n<blockquote>\n<p><strong>The</strong> <code>i</code> <strong>is switched to a</strong> <code>j</code> <strong>in programming.</strong></p>\n</blockquote>\n<p><span class=\"graf-dropCap\">T</span>*his is because the letter i is common place as the de facto index for any and all enumerable entities so it just makes sense not to compete for name-*<strong><em>space</em></strong> <em>when there‚Äôs another 25 letters that don‚Äôt get used for every loop under the sun. My most medium apologies to Leonhard Euler.</em></p>\n<pre><code>print(7j) # => 7j\nprint(5.1+7.7j)) # => 5.1+7.7j\nprint(complex(3, 5)) # => 3+5j\nprint(complex(17)) # => 17+0j\nprint(complex()) # => 0j\n</code></pre>\n<ul>\n<li><span id=\"2579\"><strong>Type Casting</strong>¬†: The process of converting one number to another.</span></li>\n</ul>\n<!-- -->\n<pre><code># Using Float\nprint(17)               # => 17\nprint(float(17))        # => 17.0\n\n# Using Int\nprint(17.0)             # => 17.0\nprint(int(17.0))        # => 17\n\n# Using Str\nprint(str(17.0) + ' and ' + str(17))        # => 17.0 and 17\n</code></pre>\n<p><strong>The arithmetic operators are the same between JS and Python, with two additions:</strong></p>\n<ul>\n<li><span id=\"8cf4\"><em>‚Äú**‚Äù¬†: Double asterisk for exponent.</em></span></li>\n<li><span id=\"03b4\"><em>‚Äú//‚Äù¬†: Integer Division.</em></span></li>\n<li><span id=\"2ce5\"><strong>There are no spaces between math operations in Python.</strong></span></li>\n<li><span id=\"1686\"><strong>Integer Division gives the other part of the number from Module; it is a way to do round down numbers replacing</strong> <code>Math.floor()</code> <strong>in JS.</strong></span></li>\n<li><span id=\"a6a3\"><strong>There are no</strong> <code>++</code> <strong>and</strong> <code>--</code> <strong>in Python, the only shorthand operators are:</strong></span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/0*Ez_1PZ93N4FfvkRr.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Strings</h3>\n<ul>\n<li><span id=\"e98c\">Python uses both single and double quotes.</span></li>\n<li><span id=\"225e\">You can escape strings like so <code>'Jodi asked, \"What\\'s up, Sam?\"'</code></span></li>\n<li><span id=\"9f74\">Multiline strings use triple quotes.</span></li>\n</ul>\n<!-- -->\n<pre><code>print('''My instructions are very long so to make them\nmore readable in the code I am putting them on\nmore than one line. I can even include \"quotes\"\nof any kind because they won't get confused with\nthe end of the string!''')\n</code></pre>\n<p><strong>Use the</strong> <code>len()</code> <strong>function to get the length of a string.</strong></p>\n<pre><code>print(len(‚ÄúSpaghetti‚Äù)) # => 9\n</code></pre>\n<h3><strong>Python uses</strong> <code>zero-based indexing</code></h3>\n<h4>Python allows negative indexing (thank¬†god!)</h4>\n<pre><code>print(‚ÄúSpaghetti‚Äù[-1]) # => i\n\nprint(‚ÄúSpaghetti‚Äù[-4]) # => e\n</code></pre>\n<ul>\n<li><span id=\"7567\">Python let‚Äôs you use ranges</span></li>\n</ul>\n<p>You can think of this as roughly equivalent to the slice method called on a JavaScript object or string‚Ä¶ <em>(mind you that in JS¬†‚Ä¶ strings are wrapped in an object (under the hood)‚Ä¶ upon which the string methods are actually called. As a immutable privative type</em> <strong>*by textbook definition**</strong>, a string literal could not hope to invoke most of it‚Äôs methods without violating the state it was bound to on initialization if it were not for this bit of syntactic sugar.)*</p>\n<pre><code>print(‚ÄúSpaghetti‚Äù[1:4]) # => pag\nprint(‚ÄúSpaghetti‚Äù[4:-1]) # => hett\nprint(‚ÄúSpaghetti‚Äù[4:4]) # => (empty string)\n</code></pre>\n<ul>\n<li><span id=\"1366\">The end range is exclusive just like <code>slice</code> in JS.</span></li>\n</ul>\n<!-- -->\n<pre><code># Shortcut to get from the beginning of a string to a certain index.\nprint(\"Spaghetti\"[:4])  # => Spag\nprint(\"Spaghetti\"[:-1])    # => Spaghett\n\n# Shortcut to get from a certain index to the end of a string.\nprint(\"Spaghetti\"[1:])  # => paghetti\nprint(\"Spaghetti\"[-4:])    # => etti\n</code></pre>\n<ul>\n<li><span id=\"c786\">The <code>index</code> string function is the equiv. of <code>indexOf()</code> in JS</span></li>\n</ul>\n<!-- -->\n<pre><code>print(\"Spaghetti\".index(\"h\"))    # => 4\nprint(\"Spaghetti\".index(\"t\"))    # => 6\n</code></pre>\n<ul>\n<li><span id=\"fbb6\">The <code>count</code> function finds out how many times a substring appears in a string‚Ä¶ pretty nifty for a hard coded feature of the language.</span></li>\n</ul>\n<!-- -->\n<pre><code>print(\"Spaghetti\".count(\"h\"))    # => 1\nprint(\"Spaghetti\".count(\"t\"))    # => 2\nprint(\"Spaghetti\".count(\"s\"))    # => 0\nprint('''We choose to go to the moon in this decade and do the other things,\nnot because they are easy, but because they are hard, because that goal will\nserve to organize and measure the best of our energies and skills, because that\nchallenge is one that we are willing to accept, one we are unwilling to\npostpone, and one which we intend to win, and the others, too.\n'''.count('the '))                # => 4\n</code></pre>\n<ul>\n<li><span id=\"7816\"><strong>You can use</strong> <code>+</code> <strong>to concatenate strings, just like in JS.</strong></span></li>\n<li><span id=\"ed0a\"><strong>You can also use ‚Äú*‚Äù to repeat strings or multiply strings.</strong></span></li>\n<li><span id=\"f95c\"><strong>Use the</strong> <code>format()</code> <strong>function to use placeholders in a string to input values later on.</strong></span></li>\n</ul>\n<!-- -->\n<pre><code>first_name = \"Billy\"\nlast_name = \"Bob\"\nprint('Your name is {0} {1}'.format(first_name, last_name))  # => Your name is Billy Bob\n</code></pre>\n<ul>\n<li><span id=\"445b\"><em>Shorthand way to use format function is:<br>\n_`print(f'Your name is {first</em>name} {last_name}')`</span></li>\n</ul>\n<h4>Some useful string¬†methods.</h4>\n<ul>\n<li><span id=\"118c\"><strong>Note that in JS</strong> <code>join</code> <strong>is used on an Array, in Python it is used on String.</strong></span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*eE3E5H0AoqkhqK1z.png\" class=\"graf-image\" /></figure>-   <span id=\"e95e\">There are also many handy testing methods.</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Q0CMqFd4PozLDFPB.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Variables and Expressions</h3>\n<ul>\n<li><span id=\"a255\"><strong>Duck-Typing</strong>¬†: Programming Style which avoids checking an object‚Äôs type to figure out what it can do.</span></li>\n<li><span id=\"6e70\">Duck Typing is the fundamental approach of Python.</span></li>\n<li><span id=\"5666\">Assignment of a value automatically declares a variable.</span></li>\n</ul>\n<!-- -->\n<pre><code>a = 7\nb = 'Marbles'\nprint(a)         # => 7\nprint(b)         # => Marbles\n</code></pre>\n<ul>\n<li><span id=\"f6cf\"><strong><em>You can chain variable assignments to give multiple var names the same value.</em></strong></span></li>\n</ul>\n<h4>Use with caution as this is highly unreadable</h4>\n<pre><code>count = max = min = 0\nprint(count)           # => 0\nprint(max)             # => 0\nprint(min)             # => 0\n</code></pre>\n<h4>The value and type of a variable can be re-assigned at any¬†time.</h4>\n<pre><code>a = 17\nprint(a)         # => 17\na = 'seventeen'\nprint(a)         # => seventeen\n</code></pre>\n<ul>\n<li><span id=\"4605\"><code>NaN</code> _does not exist in Python, but you can 'create' it like so:<br>\n_<code>print(float(\"nan\"))</code></span></li>\n<li><span id=\"d150\"><em>Python replaces</em> <code>null</code> <em>with</em> <code>none</code><em>.</em></span></li>\n<li><span id=\"6fa7\"><code>none</code> <strong><em>is an object</em></strong> <em>and can be directly assigned to a variable.</em></span></li>\n</ul>\n<blockquote>\n<p>Using none is a convenient way to check to see why an action may not be operating correctly in your program.</p>\n</blockquote>\n<hr>\n<h3>Boolean Data¬†Type</h3>\n<ul>\n<li><span id=\"b843\">One of the biggest benefits of Python is that it reads more like English than JS does.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*HQpndNhm1Z_xSoHb.png\" class=\"graf-image\" /></figure># Logical AND\n    print(True and True)    # => True\n    print(True and False)   # => False\n    print(False and False)  # => False\n<pre><code># Logical OR\nprint(True or True)     # => True\nprint(True or False)    # => True\nprint(False or False)   # => False\n\n# Logical NOT\nprint(not True)             # => False\nprint(not False and True)   # => True\nprint(not True or False)    # => False\n</code></pre>\n<ul>\n<li><span id=\"18cc\">By default, Python considers an object to be true UNLESS it is one of the following:</span></li>\n<li><span id=\"6e0a\">Constant <code>None</code> or <code>False</code></span></li>\n<li><span id=\"9552\">Zero of any numeric type.</span></li>\n<li><span id=\"e7ce\">Empty Sequence or Collection.</span></li>\n<li><span id=\"11d6\"><code>True</code> and <code>False</code> must be capitalized</span></li>\n</ul>\n<hr>\n<h3>Comparison Operators</h3>\n<ul>\n<li><span id=\"a4fa\">Python uses all the same equality operators as JS.</span></li>\n<li><span id=\"7f98\">In Python, equality operators are processed from left to right.</span></li>\n<li><span id=\"fb68\">Logical operators are processed in this order:</span></li>\n<li><span id=\"bf08\"><strong>NOT</strong></span></li>\n<li><span id=\"4888\"><strong>AND</strong></span></li>\n<li><span id=\"2c55\"><strong>OR</strong></span></li>\n</ul>\n<blockquote>\n<p>Just like in JS, you can use <code>parentheses</code> to change the inherent order of operations.</p>\n</blockquote>\n<blockquote>\n<p><strong>Short Circuit</strong>¬†: Stopping a program when a <code>true</code> or <code>false</code> has been reached.</p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*qHzGRLTOMTf30miT.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Identity vs¬†Equality</h3>\n<pre><code>print (2 == '2')    # => False\nprint (2 is '2')    # => False\n\nprint (\"2\" == '2')    # => True\nprint (\"2\" is '2')    # => True\n\n# There is a distinction between the number types.\nprint (2 == 2.0)    # => True\nprint (2 is 2.0)    # => False\n</code></pre>\n<ul>\n<li><span id=\"c5a5\">In the Python community it is better to use <code>is</code> and <code>is not</code> over <code>==</code> or¬†<code>!=</code></span></li>\n</ul>\n<hr>\n<h3>If Statements</h3>\n<pre><code>if name == 'Monica':\n    print('Hi, Monica.')\n\nif name == 'Monica':\n    print('Hi, Monica.')\nelse:\n    print('Hello, stranger.')\n\nif name == 'Monica':\n    print('Hi, Monica.')\nelif age &#x3C; 12:\n    print('You are not Monica, kiddo.')\nelif age > 2000:\n   print('Unlike you, Monica is not an undead, immortal vampire.')\nelif age > 100:\n   print('You are not Monica, grannie.')\n</code></pre>\n<blockquote>\n<p>Remember the order of <code>elif</code> statements matter.</p>\n</blockquote>\n<hr>\n<h3>While Statements</h3>\n<pre><code>spam = 0\nwhile spam &#x3C; 5:\n  print('Hello, world.')\n  spam = spam + 1\n</code></pre>\n<ul>\n<li><span id=\"c7f3\"><code>Break</code> statement also exists in Python.</span></li>\n</ul>\n<!-- -->\n<pre><code>spam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam >= 5:\n    break\n</code></pre>\n<ul>\n<li><span id=\"7a99\">As are <code>continue</code> statements</span></li>\n</ul>\n<!-- -->\n<pre><code>spam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam &#x3C; 5:\n    continue\n  break\n</code></pre>\n<hr>\n<h3>Try/Except Statements</h3>\n<ul>\n<li><span id=\"72ec\">Python equivalent to <code>try/catch</code></span></li>\n</ul>\n<!-- -->\n<pre><code>a = 321\ntry:\n    print(len(a))\nexcept:\n    print('Silently handle error here')\n\n    # Optionally include a correction to the issue\n    a = str(a)\n    print(len(a)\n\na = '321'\ntry:\n    print(len(a))\nexcept:\n    print('Silently handle error here')\n\n    # Optionally include a correction to the issue\n    a = str(a)\n    print(len(a))\n</code></pre>\n<ul>\n<li><span id=\"dcd1\">You can name an error to give the output more specificity.</span></li>\n</ul>\n<!-- -->\n<pre><code>a = 100\nb = 0\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    c = None\nprint(c)\n</code></pre>\n<ul>\n<li><span id=\"4027\">You can also use the <code>pass</code> commmand to by pass a certain error.</span></li>\n</ul>\n<!-- -->\n<pre><code>a = 100\nb = 0\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    pass\n</code></pre>\n<ul>\n<li><span id=\"030b\">The <code>pass</code> method won't allow you to bypass every single error so you can chain an exception series like so:</span></li>\n</ul>\n<!-- -->\n<pre><code>a = 100\n# b = \"5\"\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    pass\nexcept (TypeError, NameError):\n    print(\"ERROR!\")\n</code></pre>\n<ul>\n<li><span id=\"bf45\">You can use an <code>else</code> statement to end a chain of <code>except</code> statements.</span></li>\n</ul>\n<!-- -->\n<pre><code># tuple of file names\nfiles = ('one.txt', 'two.txt', 'three.txt')\n\n# simple loop\nfor filename in files:\n    try:\n        # open the file in read mode\n        f = open(filename, 'r')\n    except OSError:\n        # handle the case where file does not exist or permission is denied\n        print('cannot open file', filename)\n    else:\n        # do stuff with the file object (f)\n        print(filename, 'opened successfully')\n        print('found', len(f.readlines()), 'lines')\n        f.close()\n</code></pre>\n<ul>\n<li><span id=\"0e91\"><code>finally</code> is used at the end to clean up all actions under any circumstance.</span></li>\n</ul>\n<!-- -->\n<pre><code>def divide(x, y):\n    try:\n        result = x / y\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero\")\n    else:\n        print(\"Result is\", result)\n    finally:\n        print(\"Finally...\")\n</code></pre>\n<ul>\n<li><span id=\"84ee\">Using duck typing to check to see if some value is able to use a certain method.</span></li>\n</ul>\n<!-- -->\n<pre><code># Try a number - nothing will print out\na = 321\nif hasattr(a, '__len__'):\n    print(len(a))\n\n# Try a string - the length will print out (4 in this case)\nb = \"5555\"\nif hasattr(b, '__len__'):\n    print(len(b))\n</code></pre>\n<hr>\n<h3>Pass</h3>\n<ul>\n<li><span id=\"2b80\">Pass Keyword is required to write the JS equivalent of¬†:</span></li>\n</ul>\n<!-- -->\n<pre><code>if (true) {\n}\n\nwhile (true) {}\n\nif True:\n  pass\n\nwhile True:\n  pass\n</code></pre>\n<hr>\n<h3>Functions</h3>\n<ul>\n<li><span id=\"7091\"><strong>Function definition includes:</strong></span></li>\n<li><span id=\"1f11\"><strong>The</strong> <code>def</code> <strong>keyword</strong></span></li>\n<li><span id=\"ec14\"><strong>The name of the function</strong></span></li>\n<li><span id=\"7733\"><strong>A list of parameters enclosed in parentheses.</strong></span></li>\n<li><span id=\"1516\"><strong>A colon at the end of the line.</strong></span></li>\n<li><span id=\"b2dd\"><strong>One tab indentation for the code to run.</strong></span></li>\n<li><span id=\"bcef\"><strong>You can use default parameters just like in JS</strong></span></li>\n</ul>\n<!-- -->\n<pre><code>def greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\ngreeting(\"Monica\")\n# Hello Monica\n\ngreeting(\"Barry\", \"Hey\")\n# Hey Barry\n</code></pre>\n<h4><strong>Keep in mind, default parameters must always come after regular parameters.</strong></h4>\n<pre><code># THIS IS BAD CODE AND WILL NOT RUN\ndef increment(delta=1, value):\n    return delta + value\n</code></pre>\n<ul>\n<li><span id=\"c1aa\"><em>You can specify arguments by name without destructuring in Python.</em></span></li>\n</ul>\n<!-- -->\n<pre><code>def greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\n# name has no default value, so just provide the value\n# saying has a default value, so use a keyword argument\ngreeting(\"Monica\", saying=\"Hi\")\n</code></pre>\n<ul>\n<li><span id=\"54ac\">The <code>lambda</code> keyword is used to create anonymous functions and are supposed to be <code>one-liners</code>.</span></li>\n</ul>\n<p><code>toUpper = lambda s: s.upper()</code></p>\n<hr>\n<h3>Notes</h3>\n<h4>Formatted Strings</h4>\n<blockquote>\n<p>Remember that in Python join() is called on a string with an array/list passed in as the argument.<br>\nPython has a very powerful formatting engine.<br>\nformat() is also applied directly to strings.</p>\n</blockquote>\n<pre><code>shopping_list = [‚Äòbread‚Äô,‚Äômilk‚Äô,‚Äôeggs‚Äô]\nprint(‚Äò,‚Äô.join(shopping_list))\n</code></pre>\n<h3>Comma Thousands Separator</h3>\n<pre><code>print(‚Äò{:,}‚Äô.format(1234567890))\n‚Äò1,234,567,890‚Äô\n</code></pre>\n<h3>Date and¬†Time</h3>\n<pre><code>d = datetime.datetime(2020, 7, 4, 12, 15, 58)\nprint(‚Äò{:%Y-%m-%d %H:%M:%S}‚Äô.format(d))\n‚Äò2020‚Äì07‚Äì04 12:15:58‚Äô\n</code></pre>\n<h3>Percentage</h3>\n<pre><code>points = 190\ntotal = 220\nprint(‚ÄòCorrect answers: {:.2%}‚Äô.format(points/total))\nCorrect answers: 86.36%\n</code></pre>\n<h3>Data Tables</h3>\n<pre><code>width=8\nprint(‚Äò decimal hex binary‚Äô)\nprint(‚Äò-‚Äô*27)\nfor num in range(1,16):\nfor base in ‚ÄòdXb‚Äô:\nprint(‚Äò{0:{width}{base}}‚Äô.format(num, base=base, width=width), end=‚Äô ‚Äò)\nprint()\nGetting Input from the Command Line\nPython runs synchronously, all programs and processes will stop when listening for a user input.\nThe input function shows a prompt to a user and waits for them to type ‚ÄòENTER‚Äô.\nScripts vs Programs\nProgramming Script : A set of code that runs in a linear fashion.\nThe largest difference between scripts and programs is the level of complexity and purpose. Programs typically have many UI‚Äôs.\n</code></pre>\n<p><strong>Python can be used to display html, css, and JS.</strong><br>\n<em>It is common to use Python as an API (Application Programming Interface)</em></p>\n<h4>Structured Data</h4>\n<h4>Sequence¬†: The most basic data structure in Python where the index determines the¬†order.</h4>\n<blockquote>\n<p>List<br>\nTuple<br>\nRange<br>\nCollections¬†: Unordered data structures, hashable values.</p>\n</blockquote>\n<hr>\n<h4>Dictionaries Sets</h4>\n<h4>Iterable¬†: Generic name for a sequence or collection; any object that can be iterated¬†through.</h4>\n<h4>Can be mutable or immutable. Built In Data¬†Types</h4>\n<hr>\n<h3>Lists are the python equivalent of¬†arrays.</h3>\n<pre><code>empty_list = []\ndepartments = [‚ÄòHR‚Äô,‚ÄôDevelopment‚Äô,‚ÄôSales‚Äô,‚ÄôFinance‚Äô,‚ÄôIT‚Äô,‚ÄôCustomer Support‚Äô]\n</code></pre>\n<h3>You can instantiate</h3>\n<pre><code>specials = list()\n</code></pre>\n<h4>Test if a value is in a¬†list.</h4>\n<pre><code>print(1 in [1, 2, 3]) #> True\nprint(4 in [1, 2, 3]) #> False\n# Tuples : Very similar to lists, but they are immutable\n</code></pre>\n<h4>Instantiated with parentheses</h4>\n<pre><code>time_blocks = (‚ÄòAM‚Äô,‚ÄôPM‚Äô)\n</code></pre>\n<h4>Sometimes instantiated without</h4>\n<pre><code>colors = ‚Äòred‚Äô,‚Äôblue‚Äô,‚Äôgreen‚Äô\nnumbers = 1, 2, 3\n</code></pre>\n<h4>Tuple() built in can be used to convert other data into a¬†tuple</h4>\n<pre><code>tuple(‚Äòabc‚Äô) # returns (‚Äòa‚Äô, ‚Äòb‚Äô, ‚Äòc‚Äô)\ntuple([1,2,3]) # returns (1, 2, 3)\n# Think of tuples as constant variables.\n</code></pre>\n<h4>Ranges¬†: A list of numbers which can‚Äôt be changed; often used with for¬†loops.</h4>\n<p><strong>Declared using one to three parameters</strong>.</p>\n<blockquote>\n<p>Start¬†: opt. default 0, first # in sequence.<br>\nStop¬†: required next number past the last number in the sequence.<br>\nStep¬†: opt. default 1, difference between each number in the sequence.</p>\n</blockquote>\n<pre><code>range(5) # [0, 1, 2, 3, 4]\nrange(1,5) # [1, 2, 3, 4]\nrange(0, 25, 5) # [0, 5, 10, 15, 20]\nrange(0) # [ ]\nfor let (i = 0; i &#x3C; 5; i++)\nfor let (i = 1; i &#x3C; 5; i++)\nfor let (i = 0; i &#x3C; 25; i+=5)\nfor let(i = 0; i = 0; i++)\n# Keep in mind that stop is not included in the range.\n</code></pre>\n<h4>Dictionaries¬†: Mappable collection where a hashable value is used as a key to ref. an object stored in the dictionary.</h4>\n<h4>Mutable.</h4>\n<pre><code>a = {‚Äòone‚Äô:1, ‚Äòtwo‚Äô:2, ‚Äòthree‚Äô:3}\nb = dict(one=1, two=2, three=3)\nc = dict([(‚Äòtwo‚Äô, 2), (‚Äòone‚Äô, 1), (‚Äòthree‚Äô, 3)])\n# a, b, and c are all equal\n</code></pre>\n<p><strong><em>Declared with curly braces of the built in dict()</em></strong></p>\n<blockquote>\n<p><em>Benefit of dictionaries in Python is that it doesn‚Äôt matter how it is defined, if the keys and values are the same the dictionaries are considered equal.</em></p>\n</blockquote>\n<p><strong>Use the in operator to see if a key exists in a dictionary.</strong></p>\n<p><span class=\"graf-dropCap\">S</span><strong>ets¬†: Unordered collection of distinct objects; objects that need to be hashable.</strong></p>\n<blockquote>\n<p><em>Always be unique, duplicate items are auto dropped from the set.</em></p>\n</blockquote>\n<h4>Common Uses:</h4>\n<blockquote>\n<p>Removing Duplicates<br>\nMembership Testing<br>\nMathematical Operators: Intersection, Union, Difference, Symmetric Difference.</p>\n</blockquote>\n<p><strong>Standard Set is mutable, Python has a immutable version called frozenset.<br>\nSets created by putting comma seperated values inside braces:</strong></p>\n<pre><code>school_bag = {‚Äòbook‚Äô,‚Äôpaper‚Äô,‚Äôpencil‚Äô,‚Äôpencil‚Äô,‚Äôbook‚Äô,‚Äôbook‚Äô,‚Äôbook‚Äô,‚Äôeraser‚Äô}\nprint(school_bag)\n</code></pre>\n<h4>Also can use set constructor to automatically put it into a¬†set.</h4>\n<pre><code>letters = set(‚Äòabracadabra‚Äô)\nprint(letters)\n#Built-In Functions\n#Functions using iterables\n</code></pre>\n<p><strong>filter(function, iterable)¬†: creates new iterable of the same type which includes each item for which the function returns true.</strong></p>\n<p><strong>map(function, iterable)¬†: creates new iterable of the same type which includes the result of calling the function on every item of the iterable.</strong></p>\n<p><strong>sorted(iterable, key=None, reverse=False)¬†: creates a new sorted list from the items in the iterable.</strong></p>\n<p><strong>Output is always a list</strong></p>\n<p><strong>key: opt function which coverts and item to a value to be compared.</strong></p>\n<p><strong>reverse: optional boolean.</strong></p>\n<p><strong>enumerate(iterable, start=0)¬†: starts with a sequence and converts it to a series of tuples</strong></p>\n<pre><code>quarters = [‚ÄòFirst‚Äô, ‚ÄòSecond‚Äô, ‚ÄòThird‚Äô, ‚ÄòFourth‚Äô]\nprint(enumerate(quarters))\nprint(enumerate(quarters, start=1))\n</code></pre>\n<h4>(0, ‚ÄòFirst‚Äô), (1, ‚ÄòSecond‚Äô), (2, ‚ÄòThird‚Äô), (3, ‚ÄòFourth‚Äô)</h4>\n<h4>(1, ‚ÄòFirst‚Äô), (2, ‚ÄòSecond‚Äô), (3, ‚ÄòThird‚Äô), (4, ‚ÄòFourth‚Äô)</h4>\n<blockquote>\n<p>zip(*iterables)¬†: creates a zip object filled with tuples that combine 1 to 1 the items in each provided iterable.<br>\nFunctions that analyze iterable</p>\n</blockquote>\n<p><strong>len(iterable)¬†: returns the count of the number of items.</strong></p>\n<p><strong>max(*args, key=None)¬†: returns the largest of two or more arguments.</strong></p>\n<p><strong>max(iterable, key=None)¬†: returns the largest item in the iterable.</strong></p>\n<p><em>key optional function which converts an item to a value to be compared.<br>\nmin works the same way as max</em></p>\n<p><strong>sum(iterable)¬†: used with a list of numbers to generate the total.</strong></p>\n<p><em>There is a faster way to concatenate an array of strings into one string, so do not use sum for that.</em></p>\n<p><strong>any(iterable)¬†: returns True if any items in the iterable are true.</strong></p>\n<p><strong>all(iterable)¬†: returns True is all items in the iterable are true.</strong></p>\n<h3>Working with dictionaries</h3>\n<p><strong>dir(dictionary)¬†: returns the list of keys in the dictionary.<br>\nWorking with sets</strong></p>\n<p><strong>Union¬†: The pipe | operator or union(*sets) function can be used to produce a new set which is a combination of all elements in the provided set.</strong></p>\n<pre><code>a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a | b) # => {1, 2, 3, 4, 6}\n</code></pre>\n<h4>Intersection¬†: The &#x26; operator ca be used to produce a new set of only the elements that appear in all¬†sets.</h4>\n<pre><code>a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a &#x26; b) # => {2}\nDifference : The ‚Äî operator can be used to produce a new set of only the elements that appear in the first set and NOT the others.\n</code></pre>\n<p><strong>Symmetric Difference¬†: The ^ operator can be used to produce a new set of only the elements that appear in exactly one set and not in both.</strong></p>\n<pre><code>a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a ‚Äî b) # => {1, 3}\nprint(b ‚Äî a) # => {4, 6}\nprint(a ^ b) # => {1, 3, 4, 6}\n</code></pre>\n<hr>\n<h3><strong>For Statements In python, there is only one for¬†loop.</strong></h3>\n<p>Always Includes:</p>\n<blockquote>\n<ol>\n<li>The for keyword</li>\n<li>A variable name</li>\n<li>The ‚Äòin‚Äô keyword</li>\n<li>An iterable of some kid</li>\n<li>A colon</li>\n<li>On the next line, an indented block of code called the for clause.</li>\n</ol>\n</blockquote>\n<p><strong>You can use break and continue statements inside for loops as well.</strong></p>\n<p><strong>You can use the range function as the iterable for the for loop.</strong></p>\n<pre><code>print(‚ÄòMy name is‚Äô)\nfor i in range(5):\nprint(‚ÄòCarlita Cinco (‚Äò + str(i) + ‚Äò)‚Äô)\n\ntotal = 0\nfor num in range(101):\ntotal += num\nprint(total)\nLooping over a list in Python\nfor c in [‚Äòa‚Äô, ‚Äòb‚Äô, ‚Äòc‚Äô]:\nprint(c)\n\nlst = [0, 1, 2, 3]\nfor i in lst:\nprint(i)\n</code></pre>\n<p><strong><em>Common technique is to use the len() on a pre-defined list with a for loop to iterate over the indices of the list.</em></strong></p>\n<pre><code>supplies = [‚Äòpens‚Äô, ‚Äòstaplers‚Äô, ‚Äòflame-throwers‚Äô, ‚Äòbinders‚Äô]\nfor i in range(len(supplies)):\nprint(‚ÄòIndex ‚Äò + str(i) + ‚Äò in supplies is: ‚Äò + supplies[i])\n</code></pre>\n<p><strong>You can loop and destructure at the same time.</strong></p>\n<pre><code>l = 1, 2], [3, 4], [5, 6\nfor a, b in l:\nprint(a, ‚Äò, ‚Äò, b)\n</code></pre>\n<blockquote>\n<p>Prints 1, 2</p>\n</blockquote>\n<blockquote>\n<p>Prints 3, 4</p>\n</blockquote>\n<blockquote>\n<p>Prints 5, 6</p>\n</blockquote>\n<p><strong>You can use values() and keys() to loop over dictionaries.</strong></p>\n<pre><code>spam = {‚Äòcolor‚Äô: ‚Äòred‚Äô, ‚Äòage‚Äô: 42}\nfor v in spam.values():\nprint(v)\n</code></pre>\n<p><em>Prints red</em></p>\n<p><em>Prints 42</em></p>\n<pre><code>for k in spam.keys():\nprint(k)\n</code></pre>\n<p><em>Prints color</em></p>\n<p><em>Prints age</em></p>\n<p><strong>For loops can also iterate over both keys and values.</strong></p>\n<p><strong>Getting tuples</strong></p>\n<pre><code>for i in spam.items():\nprint(i)\n</code></pre>\n<p><em>Prints (‚Äòcolor‚Äô, ‚Äòred‚Äô)</em></p>\n<p><em>Prints (‚Äòage‚Äô, 42)</em></p>\n<p><em>Destructuring to values</em></p>\n<pre><code>for k, v in spam.items():\nprint(‚ÄòKey: ‚Äò + k + ‚Äò Value: ‚Äò + str(v))\n</code></pre>\n<p><em>Prints Key: age Value: 42</em></p>\n<p><em>Prints Key: color Value: red</em></p>\n<p><strong>Looping over string</strong></p>\n<pre><code>for c in ‚Äúabcdefg‚Äù:\nprint(c)\n</code></pre>\n<p><strong>When you order arguments within a function or function call, the args need to occur in a particular order:</strong></p>\n<p><em>formal positional args.</em></p>\n<p>*args</p>\n<p><em>keyword args with default values</em></p>\n<p>**kwargs</p>\n<pre><code>def example(arg_1, arg_2, *args, **kwargs):\npass\n\ndef example2(arg_1, arg_2, *args, kw_1=‚Äùshark‚Äù, kw_2=‚Äùblowfish‚Äù, **kwargs):\npass\n</code></pre>\n<hr>\n<h3><strong>Importing in¬†Python</strong></h3>\n<p><strong>Modules are similar to packages in Node.js</strong><br>\nCome in different types:</p>\n<p>Built-In,</p>\n<p>Third-Party,</p>\n<p>Custom.</p>\n<p><strong>All loaded using import statements.</strong></p>\n<hr>\n<h3><strong>Terms</strong></h3>\n<blockquote>\n<p>module¬†: Python code in a separate file.<br>\npackage¬†: Path to a directory that contains modules.<br>\n<a href=\"http://init.py\" class=\"markup--anchor markup--blockquote-anchor\"><strong>init.py</strong></a>¬†: Default file for a package.<br>\nsubmodule¬†: Another file in a module‚Äôs folder.<br>\nfunction¬†: Function in a module.</p>\n</blockquote>\n<p><strong>A module can be any file but it is usually created by placing a special file init.py into a folder. pic</strong></p>\n<p><em>Try to avoid importing with wildcards in Python.</em></p>\n<p><em>Use multiple lines for clarity when importing.</em></p>\n<pre><code>from urllib.request import (\nHTTPDefaultErrorHandler as ErrorHandler,\nHTTPRedirectHandler as RedirectHandler,\nRequest,\npathname2url,\nurl2pathname,\nurlopen,\n)\n</code></pre>\n<hr>\n<h3>Watching Out for Python¬†2</h3>\n<p><strong>Python 3 removed &#x3C;> and only uses¬†!=</strong></p>\n<p><strong>format() was introduced with P3</strong></p>\n<p><strong>All strings in P3 are unicode and encoded.<br>\nmd5 was removed.</strong></p>\n<p><strong>ConfigParser was renamed to configparser<br>\nsets were killed in favor of set() class.</strong></p>\n<h4><strong>print was a statement in P2, but is a function in¬†P3.</strong></h4>\n<h3>Topics revisited (in python¬†syntax)</h3>\n<h3>Cheat Sheet:</h3>\n<h4>If you found this guide helpful feel free to checkout my github/gists where I host similar¬†content:</h4>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--p-anchor\">bgoonz‚Äôs gists ¬∑ GitHub</a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz‚Ää‚Äî‚ÄäOverview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize‚Ä¶</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong><br />\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Python Cheat¬†Sheet:</h3>\n<h3>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar¬†content:</h3>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://gist.github.com/bgoonz\"><strong>bgoonz‚Äôs gists</strong><br />\n<em>Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |‚Ä¶</em>gist.github.com</a><a href=\"https://gist.github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz‚Ää‚Äî‚ÄäOverview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize‚Ä¶</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Or Checkout my personal Resource¬†Site:</h3>\n<h3>Discover More:</h3>\n<p><a href=\"https://bgoonz-blog.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bgoonz-blog.netlify.app/\"><strong>Web-Dev-Hub</strong><br />\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of‚Ä¶</em>bgoonz-blog.netlify.app</a><a href=\"https://bgoonz-blog.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/5cfdf3d2bdfb\">March 6, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on July 13, 2021.</p>"}