{
  "Calculators": {
    "Age calculator": [
      "Age-Calculator-GUI",
      "age_calc_gui.py",
      "none",
      "none",
      "mehabhalodiya",
      "users can type in their date of birth, and the app will calculate and display their age."
    ],
    "BMI calculator": [
      "BMI-Calculator-GUI",
      "BMI_Calculator.py",
      "none",
      "none",
      "vybhav72954",
      "Calculates Your Body Mass Index for your health fitness."
    ],
    "Binary calculator": [
      "Binary-Calculator-GUI",
      "script.py",
      "none",
      "none",
      "vybhav72954",
      "A GUI based Standard Binary number calculator."
    ],
    "Calculator GUI": [
      "Calculator-GUI",
      "script.py",
      "none",
      "none",
      "vybhav72954",
      "It is GUI based calculator used to calculate any simple mathematical equation."
    ],
    "Calculator CLI": [
      "Calculator",
      "Calcy.py",
      "none",
      "none",
      "vybhav72954",
      "A CLI that is used to calculate any simple mathematical equation."
    ],
    "Distance calculator": [
      "Distance-Calculator-GUI",
      "main.py",
      "none",
      "Distance-Calculator-GUI/requirements.txt",
      "vybhav72954",
      "This app calculates distance between two geo-locations."
    ],
    "Cryptocurrency Converter": [
      "Crypocurrency-Converter-GUI",
      "main.py",
      "none",
      "Crypocurrency-Converter-GUI/requirements.txt",
      "vybhav72954",
      "A script that converts Cryptocurrency to real currency using GUI"
    ],
    "Currency Convertor": [
      "Currency Convertor - GUI based",
      "Currency_convertor_GUI.py",
      "none",
      "none",
      "MayankkumarTank",
      "GUI-based Currency Convertor using Tkinter in python"
    ],
    "Currency Exchange Rates": [
      "Currency-Exchange-Rates",
      "exchange_rates.py",
      "none",
      "none",
      "vybhav72954",
      "A script that converts an entered currency number to many possible equivalents in other currencies"
    ],
    "Distance Converter": [
      "Distance Conversion GUI",
      "distance_conversion.py",
      "none",
      "none",
      "tanvi355",
      "This is a distance unit converter using which we can convert the distance from one unit to other."
    ],
    "Weight Converter": [
      "Weight-Converter-GUI",
      "weight_con_gui.py",
      "none",
      "none",
      "mehabhalodiya",
      "a GUI based weight converter that accepts a kilogram input value and converts that value to Carat, Gram, Ounce, Pound, Quintal and Tonne"
    ],
    "Shortest-Path-Finder": [
      "Shortest-Path-Finder (GUI)",
      "Shortest Path Finder.py",
      "none",
      "none",
      "ImgBotApp",
      "Shortest Path finder is a GUI application which finds the shortest possible path between two points placed by the user on the board."
    ],
    "Smart calcy": [
      "Smart calcy",
      "Smart_calcy.py",
      "none",
      "none",
      "Yuvraj-kadale",
      "Hey!! I am Smart calculator and my name is Genius. Genius is a Smart GUI calculator that can read English and perform the mathematical task given or simple word problems."
    ],
    "Applying Bitwise Operations": [
      "Applying Bitwise Operations",
      "Applying Bitwise operations.py",
      "none",
      "none",
      "undetectablevirus",
      "Applying Bitwise Operations on two images using OpenCV"
    ],
    "Calculate Distance": [
      "Calculate-distance",
      "manage.py",
      "none",
      "Calculate-distance/requirements.txt",
      "pritamp17",
      "App that can show distance between user's location and searched location on map."
    ],
    "Geo Cordinate Locator": [
      "Geo-Cordinate-Locator",
      "script.py",
      "none",
      "Geo-Cordinate-Locator/requirements.txt",
      "NChechulin",
      "Gets you current Longitude and Latitude when you provide your address."
    ],
    "Base_N Calculator": [
      "Base-N_Calc",
      "script.py",
      "none",
      "none",
      "XZANATOL",
      "A GUI that will allow you to convert a number of base-X to base-Y as long as X&Y > 1."
    ],
    "Blood Content Alcohol": [
      "Blood Content Alcohol",
      "Blood_Alcohol_Content.py",
      "none",
      "none",
      "soumik2012 ",
      "Want to know how much amount of alcohol you drank? Well, the Blood alcohol content program will help you find out the alcohol intake."
    ]
  },
  "AI/ML": {
    "Air pollution prediction": [
      "Air pollution prediction",
      "CodeAP.py",
      "none",
      "none",
      "Pranjal-2001",
      "This helps you find the levels of Air pollution plotted graphically with a provided dataset."
    ],
    "Bag of words": [
      "Bag of words model",
      "bow.py",
      "none",
      "none",
      "zaverisanya",
      "tokenize the sentences taken from user,  transforming text to vectors where each word and its count is a feature, Create dataframe where dataframe is an analogy to excel-spreadsheet"
    ],
    "Body detection": [
      "Body Detection",
      "detection.py",
      "none",
      "none",
      "Avishake007",
      "Detect your Body in video"
    ],
    "corona cases forecasting": [
      "corona cases forecasting",
      "main.py",
      "none",
      "corona cases forecasting/requirements.txt",
      "ImgBotApp",
      "This is a python script capable of Predicting number of covid 19 cases for next 21 days"
    ],
    "Covid 19 Detection": [
      "Covid -19-Detection-Using-Chest-X-Ray",
      "test.py",
      "none",
      "none",
      "vybhav72954",
      "This Script is all about to check wether the person is suffering from the covid-19or not."
    ],
    "Face mask detection": [
      "Face-Mask-Detection",
      "face_mask_detection_using_cnn.py",
      "none",
      "none",
      "ImgBotApp",
      "Face mask detection model using tensorflow"
    ],
    "Facial expression recognition": [
      "Facial-Expression-Recognition",
      "face-crop.py",
      "none",
      "none",
      "Debashish-hub",
      "Facial expression recognition is a technology which detects emotions in human faces. More precisely, this technology is a sentiment analysis tool and is able to automatically detect the basic or universal expressions: happiness, sadness, anger, surprise, fear, and disgust etc."
    ],
    "Heart Disease prediction": [
      "Heart Disease Prediction",
      "script.py",
      "none",
      "Heart Disease Prediction/requirements.txt",
      "aaadddiii",
      "This python script uses a machine learning model to predict whether a person has heart disease or not."
    ],
    "Message spam detection": [
      "Message_Spam_Detection",
      "Message_Spam_Detection.py",
      "none",
      "none",
      "Nkap23",
      "The python code contains script for message spam detection based on Kaggle Dataset (dataset link inside the code)"
    ],
    "Message spam": [
      "Message-Spam",
      "messagespam.py",
      "none",
      "none",
      "vybhav72954",
      "This Script is all about to check wether the entered message is a spam or not spam using machine learning algorithm"
    ],
    "Plagiarism Checker": [
      "Plagiarism-Checker",
      "plagiarism.py",
      "none",
      "none",
      "Anupreetadas",
      "In order to compute the simlilarity between two text documents"
    ],
    "Remove POS Hindi text": [
      "Remove_POS_hindi_text",
      "hindi_POS_tag_removal.py",
      "none",
      "none",
      "ImgBotApp",
      "A script to remove POS Hindi text"
    ],
    "Salary predictor": [
      "Salary Predictor",
      "model.py",
      "none",
      "none",
      "shreyasZ10",
      "This is basically a python script used to predict the average annual salary of person."
    ],
    "Text Summary": [
      "Text_Summary",
      "text_summary.py",
      "none",
      "Text_Summary/requirements.txt",
      "vybhav72954",
      "Text Summarization is an advanced project and comes under the umbrella of Natural Language Processing. There are multiple methods people use in order to summarize text."
    ],
    "Traffic Sign Detection": [
      "Traffic-Sign-Detection",
      "traffic_sign_detection.py",
      "none",
      "Traffic-Sign-Detection/requirements.txt",
      "vybhav72954",
      "Using German Traffic Sign Recognition Benchmark, in this script I have used Data Augmentation and then passed the images to miniVGGNet (VGG 7) a famous architecture of Convolutional Neural Network (CNN)."
    ],
    "Document summary creator": [
      "Document-Summary-Creator",
      "main.py",
      "none",
      "Document-Summary-Creator/requirements.txt",
      "vybhav72954",
      "A python script to create a sentence summary"
    ],
    "Reddit flair detection": [
      "Reddit-Scraping-And-Flair-Detection",
      "WebScrapping and PreProcessing.ipynb",
      "none",
      "none",
      "vybhav72954",
      "Through taking input URL from the user, the model will predict and return actual + predicted flairs from Reddit"
    ],
    "Movie Genre Prediction": [
      "Movie-Genre-Prediction-Chatbot",
      "Movie_recommendation_Sentance_Embedding.ipynb",
      "none",
      "none",
      "hritik5102",
      "Chatbot with deep learning"
    ],
    "Dominant Color Extraction": [
      "Dominant-Color-Extraction",
      "Dominant color Extraction.ipynb",
      "none",
      "Dominant-Color-Extraction/requirements.txt",
      "aryangulati",
      "Finding Dominant Colour: Finding Colour with Kmeans and giving appropriate colors to the pixel/data points of the image, In addition to analyzing them using K-means."
    ],
    "Malaria": [
      "Malaria",
      "main.py",
      "none",
      "Malaria\\requirements.txt",
      "ayush-raj8",
      "script that predicts malaria based on input of cell image"
    ]
  },
  "Scrappers": {
    "Wikipedia Infobox Scraper": [
      "Wiki_Infobox_Scraper",
      "main.py",
      "none",
      "requirements.txt",
      "RohiniRG",
      "The given python script uses beautiful soup to scrape Wikipedia pages according to the given user query and obtain data from its Wikipedia infobox. This information will be presented along with a GUI."
    ],
    "Amazon price alert": [
      "Amazon-Price-Alert",
      "amazon_scraper.py",
      "none",
      "Amazon-Price-Alert/requirements.txt",
      "dependabot",
      "web-scraper built on BeautifulSoup that alerts you when the price of an amazon prduct falls within your budget!"
    ],
    "Amazon price tracker": [
      "Amazon-Price-Tracker",
      "amazonprice.py",
      "none",
      "none",
      "vybhav72954",
      "Tracks the current given product price."
    ],
    "Animer tracker": [
      "Anime-Tracker",
      "anime_tracker.py",
      "none",
      "none",
      "vybhav72954",
      "This is a python script for giving information about the anime like information about anime , number of episodes released till date, Years active, Tags related to it."
    ],
    "Bitcoin price tracker": [
      "BITCOIN-price-tracker",
      "tracker.py",
      "none",
      "none",
      "vybhav72954",
      "Python script that show's BITCOIN Price"
    ],
    "CodeChef scrapper": [
      "Codechef Scrapper",
      "codechef.py",
      "none",
      "Codechef Scrapper/requirements.txt",
      "smriti26raina",
      "This python script will let the user to scrape 'n' number of codechef problems from any category/difficulty in https://www.codechef.com/ ,as provided by the user."
    ],
    "Dev.to scrapper": [
      "Dev.to Scraper",
      "scraper.py",
      "none",
      "Dev.to Scraper/requirements.txt",
      "Ayushjain2205",
      "Running this Script would allow the user to scrape any number of articles from dev.to from any category as per the user's choice"
    ],
    "extracting emails from website": [
      "extracting-emails-from-website",
      "emails-from-website",
      "none",
      "none",
      "ankurg132",
      "Scrapper to extract emails from a website"
    ],
    "Facebook autologin": [
      "Facebook-Autologin",
      "facebookAuto.py",
      "none",
      "Facebook-Autologin/requirements.txt",
      "vybhav72954",
      "This is a python script that automates the facebook login process"
    ],
    "Flipkart price alert": [
      "Flipkart-price-alert",
      "track.py",
      "none",
      "Flipkart-price-alert/requirements.txt",
      "Jade9ja",
      "Checks for the price of a desired product periodically. If the price drops below the desired amount, notifies the user via email."
    ],
    "Football player club info": [
      "Football-Player-Club-Info",
      "main.py",
      "none",
      "none",
      "vybhav72954",
      "Gets info of a football player"
    ],
    "Github contributor list size": [
      "Github-Size-Contributor-List",
      "script.py",
      "none",
      "none",
      "vybhav72954",
      "Makes an API call to the, \"Github API\" in order to retrieve the information needed. It retrieves the size of the repository and the number of contributors the repo has"
    ],
    "Google news scrapper": [
      "Google-News-Scraapper",
      "app.py",
      "none",
      "Google-News-Scraapper/requirements.txt",
      "vybhav72954",
      "A python Automation script that helps to scrape the google news articles."
    ],
    "Google search newsletter": [
      "Google-Search-Newsletter",
      "google-search-newsletter.py",
      "none",
      "Google-Search-Newsletter/requirements.txt",
      "vybhav72954",
      "Performs google search of topic stated in config file"
    ],
    "IMDB scrapper": [
      "IMDB-Scraper",
      "scraper.py",
      "none",
      "none",
      "priyanshu20",
      "Collects the information given on IMDB for the given title"
    ],
    "Instagram auto login": [
      "Insta-Autologin",
      "main.py",
      "none",
      "none",
      "vybhav72954",
      "Autologin for Instagram"
    ],
    "Insta Auto SendMsg": [
      "Insta-Bot-Follow-SendMsg",
      "instabot.py",
      "none",
      "none",
      "vivek-2000",
      "Given a username if the Instagram account is public , will auto-follow and send msg."
    ],
    "Insatgram Profile Pics downloader": [
      "Instagram downloader",
      "downloader.py",
      "none",
      "none",
      "Sloth-Panda",
      "This python script is used to download profile pics that are on instagram."
    ],
    "Instagram Liker bot": [
      "Instagram Liker Bot",
      "Instagram_Liker_Bot.py",
      "none",
      "none",
      "sayantani11",
      "Given a username if the Instagram account is public or the posts are accessible to the operator, will auto-like all the posts on behalf and exit."
    ],
    "Internshala Scraper": [
      "Internshala-Scraper",
      "program.py",
      "none",
      "Internshala-Scraper/requirements.txt",
      "vybhav72954",
      "Select field, select number of pages and the script saves internships to a csv."
    ],
    "LinkedIn connectinos scrapper": [
      "Linkedin_Connections_Scrapper",
      "script.py",
      "none",
      "h-e-p-s",
      "XZANATOL",
      "It's a script built to scrap LinkedIn connections list along with the skills of each connection if you want to."
    ],
    "LinkedIn email scrapper": [
      "Linkedin-Email-Scraper",
      "main.py",
      "none",
      "Linkedin-Email-Scraper/requirements.txt",
      "vybhav72954",
      "a script to scrap names and their corresponding emails from a post"
    ],
    "Live cricket score": [
      "Live-Cricket-Score",
      "live_score.py",
      "none",
      "Live-Cricket-Score/requirements.txt",
      "vybhav72954",
      "This python script will scrap cricbuzz.com to get live scores of the matches."
    ],
    "MonsterJobs scraper": [
      "MonsterJobs Scraper",
      "scraper.py",
      "none",
      "MonsterJobs Scraper/requirements.txt",
      "Ayushjain2205",
      "Running this Script would allow the user to scrape job openings from Monster jobs, based on their choice of location, job role, company or designation."
    ],
    "Movie Info telegram bot": [
      "Movie-Info-Telegram-Bot",
      "bot.py",
      "none",
      "Movie-Info-Telegram-Bot/requirements.txt",
      "aish2002",
      "A telegram Bot made using python which scrapes IMDb website"
    ],
    "Move recommendation": [
      "Movie-Recommendation",
      "script.py",
      "none",
      "none",
      "vybhav72954",
      "The Movie Titles are scraped from the IMDb list by using BeautifulSoup Python Library to recommend to the user."
    ],
    "News scraper": [
      "News_Scrapper",
      "scrapper.py",
      "none",
      "none",
      "paulamib123",
      "This Script is used to get top 10 headlines from India Today based on the category entered by user and stores it in a CSV file."
    ],
    "Price comparison and checker": [
      "Price Comparison and Checker",
      "price_comparison.py",
      "none",
      "Price Comparison and Checker/Requirements.txt",
      "aashishah",
      "This python script can automatically search for an item across Amazon, Flipkart and other online shopping websites and after performing comparisons, find the cheapest price available."
    ],
    "Reddit meme scrapper": [
      "Reddit-Meme-Scraper",
      "script.py",
      "none",
      "Reddit-Meme-Scraper/requirements.txt",
      "vybhav72954",
      "This script locates and downloads images from several subreddits (r/deepfriedmemes, r/surrealmemes, r/nukedmemes, r/bigbangedmemes, r/wackytictacs, r/bonehurtingjuice) into your local system."
    ],
    "Search username": [
      "Search-Username",
      "search_user.py",
      "none",
      "none",
      "vybhav72954",
      "This script of code, using request module, will help to determine weather, a username exists on a platform or not."
    ],
    "Slideshare downloader": [
      "Slideshare downloader",
      "slideshare_downloader.py",
      "none",
      "Slideshare downloader/requirements.txt",
      "vikashkumar2020",
      "A Script to download slides from Slideshare as pdf from URL."
    ],
    "Social media links extractor": [
      "Social-Media-Links-From-Website",
      "script.py",
      "none",
      "none",
      "vybhav72954",
      "The code filters out all the social media links like youtube, instagram, linkedin etc. from the provided website url and displays as the output."
    ],
    "Temporary sign-up tool": [
      "Temporary-Sign-Up-Tool",
      "temp_sign_up_tool.py",
      "none",
      "Temporary-Sign-Up-Tool/requirement.md",
      "chaitanyabisht",
      "This script can be used when you want to Register or Sign Up to annoying websites or when you don't want to give out your personal data. As it provides you with a temporary username, email, and password to make your registration easy."
    ],
    "Unfollowers Insta": [
      "Unfollowers-Insta",
      "insta_bot_bb8.py",
      "none",
      "Unfollowers-Insta/requirements.txt",
      "vybhav72954",
      "bb8 is a cute name for a great bot to check for the people that you follow who don't follow you back on Instagram."
    ],
    "Weather app": [
      "Weather-App",
      "weatherapp.py",
      "none",
      "none",
      "NChechulin",
      "Gets the weather in your current location"
    ],
    "Youtube Trending Feed Scrapper": [
      "Youtube Trending Feed Scrapper",
      "youtube_scrapper.py",
      "h-c-m",
      "none",
      "XZANATOL",
      "It's a 2 scripts that is used to scrap and read the first 10 trending news in YouTube from any its available categories."
    ],
    "Zoom auto attend": [
      "Zoom-Auto-Attend",
      "zoomzoom.py",
      "none",
      "Zoom-Auto-Attend/requirements.txt",
      "dependabot",
      "A zoom bot that automatically joins zoom calls for you and saves the meeting id and password."
    ],
    "Udemy Scraper": [
      "Udemy Scraper",
      "fetcher.py",
      "none",
      "Udemy Scraper/requirements.txt",
      "Ayushjain2205",
      "This script is used to scrape course data from udemy based on the category entered as input by the user"
    ],
    "IPL Statistics": [
      "IPL Statistics GUI",
      "ipl.py",
      "none",
      "IPL Statistics GUI/requirements.txt",
      "Ayushjain2205",
      "Running this Script would allow the user see IPL statistics from various categories like most runs , most wickets etc from all seasons (2008 - 2020)"
    ],
    "Covid India Stats App": [
      "Covid India Stats App",
      "app.py",
      "none",
      "none",
      "dsg1320",
      "COVID19 stats app for indian states which works using api call"
    ],
    "Twitter Scraper without API": [
      "Twitter_Scraper_without_API",
      "fetch_hashtags.py",
      "none",
      "Twitter_Scraper_without_API/requirements.txt",
      "RohiniRG",
      "we make use of snscrape to scrape tweets associated with a particular hashtag. Snscrape is a python library that scrapes twitter without the use of API keys."
    ],
    "Coderforces Problem Scrapper": [
      "Coderforces_Problem_Scrapper",
      "Codeforces_problem_scrapper.py",
      "none",
      "Coderforces_Problem_Scrapper\\requirements.txt",
      "iamakkkhil",
      "This python script will let you download any number of Problem Statements from Codeforces and save them as a pdf file."
    ],
    "LeetCode Scraper": [
      "LeetCode-Scrapper",
      "ques.py",
      "none",
      "LeetCode-Scrapper\\requirements.txt",
      "AshuKV",
      "script will let the user to scrape 'n' number of LeetCode problems from any category/difficulty in Leetcode"
    ],
    "NSE Stocks": [
      "NSE Stocks GUI",
      "stocks.py",
      "none",
      "NSE Stocks GUI\\requirements.txt",
      "Ayushjain2205",
      "Script would allow the user to go through NSE Stock data scraped from NSE Website"
    ]
  },
  "Social_Media": {
    "Automate Facebook bot": [
      "Automate Facebook bot",
      "script.py",
      "none",
      "none",
      "Amit366",
      "On running the script it posts your message in the groups whose id is given by the user"
    ],
    "Creating Emoji": [
      "Creating-Emoji-Using-Python",
      "program.py",
      "none",
      "none",
      "vybhav72954",
      "This is python program to create emojis"
    ],
    "Discord bot": [
      "Discord-Bot",
      "main.py",
      "none",
      "none",
      "vybhav72954",
      "This is a Discord bot built with Python"
    ],
    "DownTube": [
      "DownTube-Youtube-Downloader",
      "DownTube.py",
      "h-a-p-u-f",
      "none",
      "XZANATOL",
      "DownTube is an on-to-go downloader for any bundle of Youtube links you want to download."
    ],
    "Facebook Auto login": [
      "Facebook-Autologin",
      "facebookAuto.py",
      "none",
      "Facebook-Autologin/requirements.txt",
      "vybhav72954",
      "This is a python script that automates the facebook login process"
    ],
    "Google Classroom": [
      "Google-Classroom-Bot",
      "gmeet_bot.py",
      "none",
      "Google-Classroom-Bot/requirements.txt",
      "vybhav72954",
      "This bot joins your classes for you on time automatically using your google classroom schedule and account credentials."
    ],
    "Google meet scheduler": [
      "Google-Meet-Scheduler",
      "script.py",
      "none",
      "Google-Meet-Scheduler/requirements.txt",
      "Tarun-Kamboj",
      "The script here allows you to schedule a google meeting with multiple guests using python."
    ],
    "Instagram Auto login": [
      "Insta-Autologin",
      "main.py",
      "none",
      "none",
      "vybhav72954",
      "Autologin for Instagram"
    ],
    "Insta follow sendmsg bot": [
      "Insta-Bot-Follow-SendMsg",
      "instabot.py",
      "none",
      "none",
      "vivek-2000",
      "Given a username if the Instagram account is public , will auto-follow and send msg."
    ],
    "Instagram downloader": [
      "Instagram downloader",
      "downloader.py",
      "none",
      "none",
      "Sloth-Panda",
      "This python script is used to download profile pics that are on instagram."
    ],
    "Instagram liker bot": [
      "Instagram Liker Bot",
      "Instagram_Liker_Bot.py",
      "none",
      "none",
      "sayantani11",
      "Given a username if the Instagram account is public or the posts are accessible to the operator, will auto-like all the posts on behalf and exit."
    ],
    "Instagram Profile Pic Downloader": [
      "Instagram-Profile-Pic-Downloader",
      "Instagram Profile Pic Downloader.py",
      "none",
      "none",
      "vybhav72954",
      "Instagram Profile Pic Downloader"
    ],
    "LinkedIn Connections Scrapper": [
      "Linkedin_Connections_Scrapper",
      "script.py",
      "h-e-p-s",
      "none",
      "XZANATOL",
      "A script to scrap LinkedIn connections list along with the skills of each connection if you want to."
    ],
    "LinkedIn Email Scrapper": [
      "Linkedin-Email-Scraper",
      "main.py",
      "none",
      "Linkedin-Email-Scraper/requirements.txt",
      "vybhav72954",
      "a script to scrap names and their corresponding emails from a post"
    ],
    "Movie info Telegram bot": [
      "Movie-Info-Telegram-Bot",
      "bot.py",
      "none",
      "Movie-Info-Telegram-Bot/requirements.txt",
      "aish2002",
      "A telegram Bot made using python which scrapes IMDb website"
    ],
    "Reddit meme scrapper": [
      "Reddit-Meme-Scraper",
      "script.py",
      "none",
      "Reddit-Meme-Scraper/requirements.txt",
      "vybhav72954",
      "This script locates and downloads images from several subreddits (r/deepfriedmemes, r/surrealmemes, r/nukedmemes, r/bigbangedmemes, r/wackytictacs, r/bonehurtingjuice) into your local system."
    ],
    "Search Username": [
      "Search-Username",
      "search_user.py",
      "none",
      "none",
      "vybhav72954",
      "This script of code, using request module, will help to determine weather, a username exists on a platform or not."
    ],
    "Social media links extractor": [
      "Social-Media-Links-From-Website",
      "script.py",
      "none",
      "none",
      "vybhav72954",
      "The code filters out all the social media links like youtube, instagram, linkedin etc. from the provided website url and displays as the output."
    ],
    "Telegram bot": [
      "Telegram-Bot",
      "TelegramBot.py",
      "none",
      "none",
      "vybhav72954",
      "Create a bot in telegram"
    ],
    "Tweet fetcher": [
      "Tweet-Fetcher",
      "fetcher.py",
      "none",
      "Tweet-Fetcher/requirements.txt",
      "Ayushjain2205",
      "This script is used to fetch tweets by a user specified hashtags and then store these tweets in a SQL database"
    ],
    "Unfollowers Insta": [
      "Unfollowers-Insta",
      "insta_bot_bb8.py",
      "none",
      "Unfollowers-Insta/requirements.txt",
      "vybhav72954",
      "bb8 is a cute name for a great bot to check for the people that you follow who don't follow you back on Instagram."
    ],
    "Whatsapp COVID19 Bot": [
      "Whatsapp_COVID-19_Bot",
      "covid_bot.py",
      "none",
      "Whatsapp_COVID-19_Bot/requirements.txt",
      "vybhav72954",
      "A COVID-19 Bot build using `Twilio API`, that tracks the Number of Infected persons, Recovered Persons and Number of Total deaths along with the day-to-day increase in the statistics. The information is then updated via WhatsApp."
    ],
    "Whatsapp Automation": [
      "Whatsapp-Automation",
      "whatsappAutomation.py",
      "none",
      "none",
      "vybhav72954",
      "Whatsapp automated message sender"
    ],
    "Whatsapp auto messenger": [
      "WhatsApp-Auto-Messenger",
      "WhatsApp-Auto-Messenger.py",
      "none",
      "WhatsApp-Auto-Messenger/requirements.txt",
      "AnandD007",
      "Send and schedule a message in WhatsApp by only seven lines of Python Script."
    ],
    "Youtube Trending Feed Scrapper": [
      "Youtube Trending Feed Scrapper",
      "youtube_scrapper.py",
      "h-c-m",
      "none",
      "XZANATOL",
      "It's a 2 scripts that is used to scrap and read the first 10 trending news in YouTube from any its available categories."
    ],
    "Youtube Audio Downloader": [
      "Youtube-Audio-Downloader",
      "YouTubeAudioDownloader.py",
      "none",
      "Youtube-Audio-Downloader/requirements.txt",
      "vybhav72954",
      "Download Audio Of A YouTube Video"
    ],
    "Youtube Video Downloader": [
      "YouTube-Video-Downloader",
      "youtube_vid_dl.py",
      "none",
      "none",
      "mehabhalodiya",
      "The objective of this project is to download any type of video in a fast and easy way from youtube in your device."
    ],
    "Instagram Follow/NotFollow": [
      "Instagram Follow- NotFollow",
      "main.py",
      "none",
      "none",
      "nidhivanjare",
      "An Instagram chatbot to display people you follow and who do not follow you back."
    ]
  },
  "PDF": {
    "PDF TO Word converter": [
      "PDFToWord",
      "main.py",
      "none",
      "requirements.txt",
      "dsrao711",
      "Takes the path of pdf from the user, The user can add a custom name to the word doc otherwise the same name of the pdf will be used."
    ],
    "PDF Encryptor": [
      "PDF Encryption",
      "pdfEncryption.py",
      "none",
      "none",
      "vybhav72954",
      "The Python Script will let you encrypt the PDF with one OWNER and one USER password respectively."
    ],
    "PDF2TXT": [
      "PDF2Text",
      "script.py",
      "none",
      "none",
      "Amit366",
      "Converts PDF file to a text file"
    ],
    "PDF Delete Pages": [
      "PDF-Delete-Pages",
      "script.py",
      "none",
      "none",
      "vybhav72954",
      "Using this script you can delete the pages you don't want with just one click."
    ],
    "PDF2Audio": [
      "PDF-To-Audio",
      "pdf_to_audio.py",
      "none",
      "none",
      "vybhav72954",
      "Add the possiblity to save .PDF to .MP3"
    ],
    "PDF2CSV": [
      "PDF-To-CSV-Converter",
      "main.py",
      "none",
      "PDF-To-CSV-Converter/requirements.txt.txt",
      "vybhav72954",
      "Converts .PDF to .CSV"
    ],
    "PDF Tools": [
      "PDF-Tools",
      "main.py",
      "none",
      "PDF-Tools/requirements.txt",
      "iamakkkhil",
      "Multiple functionalities involving PDFs which can be acessed using console menu"
    ],
    "PDF Watermark": [
      "PDF-Watermark",
      "pdf-watermark.py",
      "none",
      "none",
      "vybhav72954",
      "Adds a watermark to the provided PDF."
    ],
    "PDF arrange": [
      "Rearrange-PDF",
      "ReArrange.py",
      "none",
      "none",
      "vybhav72954",
      "This script can be helpful for re-arranging a pdf file which may have pages out of order."
    ]
  },
  "Image_Processing": {
    "Catooning Image": [
      "Cartooning Image",
      "cartooneffect.py",
      "none",
      "none",
      "aliya-rahmani",
      "Aim to transform images into its cartoon."
    ],
    "Color Detection": [
      "Color_dectection",
      "Color_detection.py",
      "none",
      "none",
      "deepshikha007",
      "An application through which you can automatically get the name of the color by clicking on them."
    ],
    "Convert2JPG": [
      "Convert-to-JPG",
      "convert2jpg.py",
      "none",
      "none",
      "vybhav72954",
      "This is a python script which converts photos to jpg format"
    ],
    "Image editor": [
      "Image editor python script",
      "Image_editing_script.py",
      "none",
      "none",
      "asmita20aggarwal",
      "This menu-driven python script uses pillow library to make do some editing over the given image."
    ],
    "Image processor": [
      "Image Processing",
      "ImgEnhancing.py",
      "none",
      "none",
      "Lakhankumawat",
      "Enchances a provided Image. Directory has 2 other scripts"
    ],
    "Image Background Remover": [
      "Image_Background_Subtractor",
      "BG_Subtractor.py",
      "none",
      "Image_Background_Subtractor/requirements.txt",
      "iamakkkhil",
      "This python script lets you remove background form image by keeping only foreground in focus."
    ],
    "Image viewer with GUI": [
      "Image_Viewing_GUI",
      "script.py",
      "none",
      "none",
      "Amit366",
      "script to see all the images one by one."
    ],
    "IMG2SKETCH": [
      "ImageToSketch",
      "sketchScript.py",
      "none",
      "none",
      "vaishnavirshah",
      "Menu driven script- takes either the path of the image from the user or captures the image using webcam as per the user preference. The image is then converted to sketch."
    ],
    "IMG2SPEECH": [
      "Imagetospeech",
      "image_to_speech.py",
      "none",
      "none",
      "Amit366",
      "The script converts an image to text and speech files."
    ],
    "OCR Image to text": [
      "OCR-Image-To-Text",
      "ocr-img-to-txt.py",
      "none",
      "none",
      "vybhav72954",
      "A script that converts provided OCR Image to text"
    ],
    "Screeshot": [
      "Screenshot",
      "screenshot.py",
      "none",
      "none",
      "vybhav72954",
      "A script that takes a screenshot of your current screen."
    ],
    "Screenshot with GUI": [
      "Screenshot-GUI",
      "screenshot_gui.py",
      "none",
      "none",
      "vybhav72954",
      "A simple GUI script that allows you to capture a screenshot of your current screen."
    ],
    "Text Extraction from Images": [
      "Text-Extract-Images",
      "text_extract.py",
      "none",
      "Text-Extract-Images/requirements.txt",
      "vybhav72954",
      "Text extraction form Images, OCR, Tesseract, Basic Image manipulation."
    ],
    "Text on Image drawer": [
      "Text-On-Image.py",
      "text_on_image.py",
      "none",
      "none",
      "vybhav72954",
      "A script to draw text on an Image."
    ],
    "Watermark maker on Image": [
      "Watermark Maker(On Image)",
      "Watermark_maker.py",
      "none",
      "none",
      "aishwaryachand",
      "User  will be able to create a watermark on a given image."
    ],
    "Photo2ASCII": [
      "Photo To Ascii",
      "photo_to_ascii.py",
      "none",
      "none",
      "Avishake007",
      "Convert your photo to ascii with it"
    ],
    "Ghost filter": [
      "Ghost filter",
      "Ghost filter code.py",
      "none",
      "none",
      "A-kriti",
      "Converting an image into ghost/negative image"
    ],
    "Invisibility Cloak": [
      "Invisibility_Cloak",
      "Invisibility_Cloak.py",
      "none",
      "none",
      "satyampgt4",
      "An invisibility cloak is a magical garment which renders whomever or whatever it covers invisible"
    ],
    "Corner Detection": [
      "Fast Algorithm (Corner Detection)",
      "Fast_Algorithm.py",
      "none",
      "none",
      "ShubhamGupta577",
      "In this script, we implement the `Fast (Features from Accelerated Segment Test)` algorithm of `OpenCV` to detect the corners from any image."
    ]
  },
  "Video_Processing": {
    "Vid2Aud GUI": [
      "Video-Audio-Converter-GUI",
      "converter.py",
      "none",
      "none",
      "amrzaki2000",
      "This is a video to audio converter created with python."
    ],
    "Vid2Aud CLI": [
      "Video-To-Audio(CLI-Ver)",
      "video_to_audio.py",
      "none",
      "none",
      "smriti1313",
      "Used to convert any type of video file to audio files using python."
    ],
    "Video watermark adder": [
      "Video-Watermark",
      "watermark.py",
      "none",
      "Video-Watermark/requirements.txt",
      "vybhav72954",
      "This script can add watermark to a video with the given font."
    ]
  },
  "Games": {
    "Spaceship Game": [
      "Spaceship_Game",
      "main.py",
      "none",
      "requirements.txt",
      "iamakkkhil",
      "The python script makes use of Pygame, a popular GUI module, to develop an interactive Multiplayer Spaceship Game."
    ],
    "Blackjack": [
      "Blackjack",
      "blackjack.py",
      "none",
      "none",
      "mehabhalodiya",
      "Blackjack (also known as 21) is a multiplayer card game, with fairly simple rules."
    ],
    "Brick Breaker": [
      "Brick Breaker game",
      "brick_breaker.py",
      "none",
      "none",
      "Yuvraj-kadale",
      "Brick Breaker is a Breakout clonewhich the player must smash a wall of bricks by deflecting a bouncing ball with a paddle."
    ],
    "Bubble Shooter": [
      "Bubble Shooter Game",
      "bubbleshooter.py",
      "none",
      "none",
      "syamala27",
      "A Bubble Shooter game built with Python and love."
    ],
    "Turtle Graphics": [
      "Codes on Turtle Graphics",
      "Kaleido-spiral.py",
      "none",
      "none",
      "ricsin23",
      "_turtle_ is a pre installed library in Python that enables us to create pictures and shapes by providing them with a virtual canvas."
    ],
    "Connect 4": [
      "Connect-4 game",
      "Connect-4.py",
      "none",
      "none",
      "syamala27",
      "Four consecutive balls should match of the same colour horizontally, vertically or diagonally"
    ],
    "Flames": [
      "Flames-Game",
      "flames_game_gui.py",
      "none",
      "none",
      "vybhav72954",
      "Flames game"
    ],
    "Guessing Game": [
      "Guessing_Game_GUI",
      "guessing_game_tkinter.py",
      "none",
      "none",
      "saidrishya",
      "A random number is generated between an upper and lower limit both entered by the user. The user has to enter a number and the algorithm checks if the number matches or not within three attempts."
    ],
    "Hangman": [
      "Hangman-Game",
      "main.py",
      "none",
      "none",
      "madihamallick",
      "A simple Hangman game using Python"
    ],
    "MineSweeper": [
      "MineSweeper",
      "minesweeper.py",
      "none",
      "none",
      "Ratnesh4193",
      "This is a python script MINESWEEPER game"
    ],
    "Snake": [
      "Snake Game (GUI)",
      "game.py",
      "none",
      "none",
      "vybhav72954",
      "Snake game is an Arcade Maze Game which has been developed by Gremlin Industries. The player\u2019s objective in the game is to achieve maximum points as possible by collecting food or fruits. The player loses once the snake hits the wall or hits itself."
    ],
    "Sudoku Solver and Visualizer": [
      "Sudoku-Solver-And-Vizualizer",
      "Solve_viz.py",
      "none",
      "none",
      "vybhav72954",
      "Sudoku Solver and Vizualizer"
    ],
    "Terminal Hangman": [
      "Terminal Hangman",
      "T_hangman.py",
      "none",
      "none",
      "Yuvraj-kadale",
      "Guess the Word in less than 10 attempts"
    ],
    "TicTacToe GUI": [
      "TicTacToe-GUI",
      "TicTacToe.py",
      "none",
      "none",
      "Lakhankumawat",
      "Our Tic Tac Toe is programmed in other to allow two users or players to play the game in the same time."
    ],
    "TicTacToe using MinMax": [
      "Tictactoe-Using-Minmax",
      "main.py",
      "none",
      "none",
      "NChechulin",
      "Adversarial algorithm-Min-Max for Tic-Tac-Toe Game. An agent (Robot) will play Tic Tac Toe Game with Human."
    ],
    "Typing Speed Test": [
      "Typing-Speed-Test",
      "speed_test.py",
      "none",
      "none",
      "dhriti987",
      "A program to test (hence improve) your typing speed"
    ],
    "Tarot Reader": [
      "Tarot Reader",
      "tarot_card_reader.py",
      "none",
      "none",
      "Akshu-on-github",
      "This is a python script that draws three cards from a pack of 78 cards and gives fortunes for the same. As it was originally created as a command line game, it doesn't have a GUI"
    ],
    "Stone Paper Scissors Game": [
      "Stone-Paper-Scissors-Game",
      "Rock-Paper-Scissors Game.py",
      "none",
      "none",
      "NChechulin",
      "Stone Paper Scissors Game"
    ],
    "StonePaperScissor - GUI": [
      "StonePaperScissor - GUI",
      "StonePaperScissors.py",
      "none",
      "none",
      "Lakhankumawat",
      "Rock Paper and Scissor Game Using Tkinter"
    ],
    "Guess the Countries": [
      "Guess the Countries",
      "main.py",
      "none",
      "none",
      "Shubhrima Jana",
      "Guess the name of the countries on the world map and score a point with every correct guess."
    ],
    "Dice Roll Simulator": [
      "Dice-Roll-Simulator",
      "dice_roll_simulator.py",
      "none",
      "none",
      "mehabhalodiya",
      "It is making a computer model. Thus, a dice simulator is a simple computer model that can roll a dice for us."
    ]
  },
  "Networking": {
    "Browser": [
      "Broswer",
      "browser.py",
      "none",
      "none",
      "Sloth-Panda",
      "This is a simple web browser made using python with just functionality to have access to the complete gsuite(google suite) and the default search engine here is google."
    ],
    "Get Wifi Password": [
      "Get-Wifi-Password",
      "finder.py",
      "none",
      "none",
      "pritamp17",
      "A Python Script Which,when excuted on target WINDOWS PC will send all the stored WIFI passwords in it through given email."
    ],
    "HTTP Server": [
      "HTTP-Server",
      "httpServer.py",
      "none",
      "HTTP-Server/requirements.txt",
      "NChechulin",
      "This is the project based on http protocol that has been used in day to day life. All dimensions are considered according to rfc 2616"
    ],
    "HTTP Sniffer": [
      "Http-Sniffer",
      "sniffer.py",
      "none",
      "none",
      "avinashkranjan",
      "python3 script to sniff data from the HTTP pages."
    ],
    "Network Scanner": [
      "Network-Scanner",
      "network_scanner.py",
      "none",
      "none",
      "NChechulin",
      "This tool will show all the IP's on the same network and their respective MAC adresses"
    ],
    "Network Troubleshooter": [
      "Network-troubleshooter",
      "ipreset.py",
      "none",
      "none",
      "geekymeeky",
      "A CLI tool to fix corrupt IP configuaration and other network socket related issue of your Windows PC."
    ],
    "Phone Number Tracker": [
      "Phonenumber Tracker",
      "index.py",
      "none",
      "none",
      "Sloth-Panda",
      "This is a phonenumber tracker that uses phonenumbers library to get the country and service provider of the phone number and coded completely in python."
    ],
    "Port Scanner": [
      "PortScanning",
      "portscanningscript.py",
      "none",
      "none",
      "Mafiaguy",
      "A python scripting which help to do port scanning of a particular ip."
    ],
    "Wifi Password Saver": [
      "Save-Wifi-Password",
      "wifiPassword.py",
      "none",
      "none",
      "geekymeeky",
      "Find and write all your saved wifi passwords in a txt file"
    ],
    "URL Shortner": [
      "URL-Shortener",
      "url-shortener.py",
      "none",
      "none",
      "NChechulin",
      "It shortens your given website URL."
    ],
    "URL Shortner GUI": [
      "URL-Shortener-GUI",
      "url-shortener-gui.py",
      "none",
      "none",
      "NChechulin",
      "GUI based It shortens your given website URL."
    ],
    "Website Status Checker": [
      "Website-Status-Checker",
      "website_status_checker.py",
      "none",
      "none",
      "avinashkranjan",
      "This script will check the status of the web address which you will input"
    ],
    "Email Validator": [
      "Email-Validator",
      "email-verification.py",
      "none",
      "none",
      "saaalik",
      "A simple program which checks for Email Address Validity in three simple checks"
    ]
  },
  "OS_Utilities": {
    "Auto Backup": [
      "Auto_Backup",
      "Auto_Backup.py",
      "none",
      "t-s-c",
      "vybhav72954",
      "Automatic Backup and Compression of large file, sped up using Threading."
    ],
    "Battery Notification": [
      "Battery-Notification",
      "Battery-Notification.py",
      "none",
      "none",
      "pankaj892",
      "This is a Python Script which shows the battery percentage left"
    ],
    "CPU Temperature": [
      "CPU temperature",
      "temp.py",
      "none",
      "none",
      "atarax665",
      "This python script is used to get cpu temperature"
    ],
    "Desktop News Notification": [
      "Desktop News Notifier",
      "script.py",
      "none",
      "none",
      "Amit366",
      "On running the script it gives a notification of top 10 news"
    ],
    "Desktop drinkWater Notification": [
      "Desktop-drinkWater-Notification",
      "main.py",
      "none",
      "none",
      "viraldevpb",
      "This python script helps user to drink more water in a day as per her body needed and also this python script is executed in the background and every 30 minutes it notifies user to drink water."
    ],
    "Desktop Voice Assistant": [
      "Desktop-Voice-assistant",
      "voice_assistant.py",
      "none",
      "Desktop-Voice-assistant/requirements.txt",
      "sayantani11",
      "It would be great to have a desktop voice assistant who could perform tasks like sending email, playing music, search wikipedia on its own when we ask it to."
    ],
    "Digital Clock": [
      "Digital Clock",
      "Clock.py",
      "none",
      "none",
      "Dhanush2612",
      "A simple digital 12 hour clock."
    ],
    "Duplicate File Finder": [
      "Duplicate-File-Finder",
      "file_finder.py",
      "argv",
      "Duplicate-File-Finder/requirements.txt",
      "vybhav72954",
      "This sweet and simple script helps you to compare various files in a directory, find the duplicate, list them out, and then even allows you to delete them."
    ],
    "Email Sender": [
      "Email-Sender",
      "email-sender.py",
      "none",
      "none",
      "avinashkranjan",
      "A script to send Email using Python."
    ],
    "File Change Listener": [
      "File-Change-Listen",
      "main.py",
      "none",
      "File-Change-Listen/requirements.txt",
      "antrikshmisri",
      "This is a python script that keeps track of all files change in the current working directory"
    ],
    "File Mover": [
      "File-Mover",
      "fmover.py",
      "none",
      "File-Mover/requirements.txt",
      "NChechulin",
      "his is a small program that automatically moves and sorts files from chosen source to destination."
    ],
    "Folder2Zip": [
      "Folder-To-Zip",
      "folder-to-zip.py",
      "none",
      "none",
      "NChechulin",
      "To convert folders into ZIP format"
    ],
    "Get Wifi Password": [
      "Get-Wifi-Password",
      "finder.py",
      "none",
      "none",
      "pritamp17",
      "A Python Script Which,when excuted on target WINDOWS PC will send all the stored WIFI passwords in it through given email."
    ],
    "Keylogger": [
      "Keylogger",
      "keylogger.py",
      "none",
      "none",
      "madihamallick",
      "A Keylogger script built using Python."
    ],
    "Last Access": [
      "Last Access",
      "Last Access.py",
      "none",
      "none",
      "Bug-007",
      "It prints out when was the last the file in folder was accessed."
    ],
    "Mini Google Assistant": [
      "Mini Google Assistant",
      "Mini google assistant.py",
      "none",
      "none",
      "A-kriti",
      "A mini google assistant using python which can help you to play song, tell time, tell joke, tell date as well as help you to capure a photo/video."
    ],
    "Music Player": [
      "Music-Player-App",
      "main.py",
      "none",
      "none",
      "robin025",
      "A Python GUI Based Music Player"
    ],
    "News Voice Assistant": [
      "News-Voice-Assistant",
      "news_assistant.py",
      "none",
      "News-Voice-Assistant/requirements.txt",
      "NChechulin",
      "Hear your favourite news in your computer!"
    ],
    "Organise Files According To Their Extensions": [
      "Organise-Files-According-To-Their-Extensions",
      "script_dirs.py",
      "none",
      "none",
      "NChechulin",
      "Script to organise files according to their extensions"
    ],
    "Paint App": [
      "Paint Application/",
      "paint.py",
      "none",
      "Paint Application/requirements.txt",
      "Ayushjain2205",
      "Running this Script would open up a Paint application GUI on which the user can draw using the brush tool."
    ],
    "Password Generator": [
      "Password-Generator",
      "passowrd_gen.py",
      "none",
      "none",
      "NChechulin",
      "A Password Generator built using Python"
    ],
    "Password Manager": [
      "Password-Manager-GUI",
      "passwords.py",
      "none",
      "none",
      "Ayushjain2205",
      "This script opens up a Password Manager GUI on execution."
    ],
    "QR Code Generator": [
      "QR_Code_Generator",
      "main.py",
      "none",
      "none",
      "CharvyJain",
      "This script will generate the QR Code of the given link."
    ],
    "QR code Gen": [
      "QR-code-Genrator",
      "main.py",
      "none",
      "QR-code-Genrator/requirement.txt",
      "Goheljay",
      "A simple GUI based qr code genrator application in Python that helps you to create the qr code based on user given data."
    ],
    "Random Password Generator": [
      "Random Password Generator",
      "script.py",
      "none",
      "none",
      "tanvi355",
      "This is a random password generator."
    ],
    "Random Email Generator": [
      "Random-Email-Generator",
      "random_email_generator.py",
      "none",
      "none",
      "pankaj892",
      "This is a Python Script which generates random email addresses"
    ],
    "Run Script at a Particular Time": [
      "Run-Script-At-a-Particular-Time",
      "date_time.py",
      "none",
      "none",
      "avinashkranjan",
      "Runs a script at a particular time defined by a user"
    ],
    "Screen Recorder": [
      "Screen-Recorder",
      "screen_recorder.py",
      "none",
      "none",
      "avinashkranjan",
      "It records the computer screen."
    ],
    "Notepad": [
      "Simple Notepad",
      "SimpleNotepad.py",
      "none",
      "none",
      "Bug-007",
      "Using Tkinter GUI of simplenotepad is made."
    ],
    "Python IDE": [
      "Simple Python IDE using Tkinter",
      "script.py",
      "none",
      "none",
      "Priyadarshan2000",
      "This is a Simple Python IDE using Tkinter."
    ],
    "Site Blocker": [
      "Site-blocker",
      "web-blocker.py",
      "none",
      "none",
      "Sloth-Panda",
      "This is a script that aims to implement a website blocking utility for Windows-based systems."
    ],
    "Speech to Text": [
      "Speech-To-Text",
      "speech-to-text.py",
      "none",
      "none",
      "avinashkranjan",
      "A script that converts speech to text"
    ],
    "Text to Speech": [
      "Text-To-Speech",
      "text-to-speech.py",
      "none",
      "none",
      "mehabhalodiya",
      "Text to speech is a process to convert any text into voice."
    ],
    "ToDo": [
      "ToDo-GUI",
      "todo.py",
      "none",
      "ToDo-GUI/requirements.txt",
      "a-k-r-a-k-r",
      "This project is about creating a ToDo App with simple to use GUI"
    ],
    "Unzip File": [
      "Unzip file",
      "script.py",
      "none",
      "none",
      "Amit366",
      "Upload the zip file which is to be unzipped"
    ],
    "Voice Assistant": [
      "Voice-Assistant",
      "test.py",
      "none",
      "none",
      "avinashkranjan",
      "It is a beginner-friendly script in python, where they can learn about the if-else conditions in  python and different libraries."
    ],
    "Bandwidth Monitor": [
      "Bandwidth-Monitor",
      "bandwidth_py3.py",
      "none",
      "none",
      "adarshkushwah",
      "A python script to keep a track of network usage and notify you if it exceeds a specified limit (only support for wifi right now)"
    ],
    "Sticky Notes": [
      "sticky notes",
      "main.py",
      "none",
      "none",
      "vikashkumar2020",
      "A simple GUI based application in Python that helps you to create simple remember lists or sticky notes."
    ],
    "Calendar": [
      "Calendar GUI",
      "Calendar_gui.py",
      "none",
      "none",
      "aishwaryachand",
      "Using this code you will be able to create a Calendar GUI where calendar of a specific year appears."
    ],
    "Directory Tree Generator": [
      "Directory Tree Generator",
      "tree.py",
      "argv",
      "Directory Tree Generator/requirements.txt",
      "vikashkumar2020",
      "A Script useful for visualizing the relationship between files and directories and making their positioning easy."
    ],
    "Stopwatch": [
      "Stopwatch GUI",
      "stopwatch_gui.py",
      "none",
      "none",
      "aishwaryachand",
      "This is a Stopwatch GUI using which user can measure the time elapsed using the start and pause button."
    ],
    "Webcam Imgcap": [
      "Webcam-(imgcap)",
      "webcam-img-cap.py",
      "none",
      "none",
      "NChechulin",
      "Image Capture using Web Camera"
    ],
    "Countdown clock and Timer": [
      "Countdown_clock_and_Timer",
      "countdown_clock_and_timer.py",
      "none",
      "none",
      "Ayush7614",
      "A simple timer that can be used to track runtime."
    ],
    "Paint Application": [
      "Paint Application",
      "paint.py",
      "none",
      "Paint Application/requirements.txt",
      "Ayushjain2205",
      "Running this Script would open up a Paint application GUI on which the user can draw using the brush tool."
    ],
    "Covid-19 Updater": [
      "Covid-19-Updater",
      "covid-19-updater_bot.py",
      "none",
      "none",
      "avinashkranjan",
      "Get hourly updates of Covid19 cases, deaths and recovered from coronavirus-19-api.herokuapp.com using a desktop app in Windows."
    ],
    "Link Preview": [
      "Link-Preview",
      "linkPreview.py",
      "none",
      "Link-Preview/requirements.txt",
      "jhamadhav",
      "A script to provide the user with a preview of the link entered."
    ]
  },
  "Automation": {
    "Firebase Management Scripts": [
      "FirebaseScripts",
      "firebase_authentications.py ",
      "none",
      "requirements.txt",
      "shantamsultania ",
      "A set of Scripts that can be used to connect to different services provided by firebase cloud services "
    ],
    "Gmail Attachment Downloader": [
      "Attachment_Downloader",
      "attachment.py",
      "none",
      "none",
      "Kirtan17",
      "The script downloads gmail atttachment(s) in no time!"
    ],
    "Auto Birthday Wisher": [
      "Auto Birthday Wisher",
      "Auto B'Day Wisher.py",
      "none",
      "none",
      "SpecTEviL",
      "An automatic birthday wisher via email makes one's life easy. It will send the birthday wishes to friends via email automatically via a server and using an excel sheet to store the data of friends and their birthdays along with email id."
    ],
    "Auto Fill Google Forms": [
      "Auto-Fill-Google-Forms",
      "test.py",
      "none",
      "none",
      "NChechulin",
      "This is a python script which can helps you to fillout the google form automatically by bot."
    ],
    "Automatic Certificate Generator": [
      "Automatic Certificate Generator",
      "main.py",
      "none",
      "none",
      "achalesh27022003",
      "This python script automatically generates certificate by using a certificate template and csv file which contains the list of names to be printed on certificate."
    ],
    "Chrome Automation": [
      "Chrome-Automation",
      "chrome-automation.py",
      "none",
      "none",
      "NChechulin",
      "Automated script that opens chrome along with a couple of defined pages in tabs."
    ],
    "Custom Bulk Email Sender": [
      "Custom-Bulk-Email-Sender",
      "customBulkEmailSender.py",
      "none",
      "none",
      "NChechulin",
      "he above script is capable of sending bulk custom congratulation emails which are listed in the .xlsx or .csv format."
    ],
    "Github Automation": [
      "Github-Automation",
      "main.py",
      "none",
      "Github-Automation/requirements.txt",
      "antrikshmisri",
      "This script allows user to completely automate github workflow."
    ],
    "SMS Automation": [
      "SMS Automation",
      "script.py",
      "none",
      "none",
      "Amit366",
      "Send SMS messages using Twilio"
    ],
    "Send Twilio SMS": [
      "Send-Twilio-SMS",
      "main.py",
      "none",
      "none",
      "dhanrajdc7",
      "Python Script to Send SMS to any Mobile Number using Twilio"
    ],
    "Spreadsheet Comparision Automation": [
      "Spreadsheet_Automation",
      "script.py",
      "none",
      "none",
      "Amit366",
      "Spreadsheet Automation Functionality to compare 2 datasets."
    ],
    "HTML Email Sender": [
      "HTML-Email-Sender",
      "main.py",
      "none",
      "none",
      "dhanrajdc7",
      "This script helps to send HTML Mails to Bulk Emails"
    ],
    "HTML to MD": [
      "HTML-To-MD",
      "html_to_md.py",
      "none",
      "none",
      "NChechulin",
      "Converts HTML file to MarkDown (MD) file"
    ],
    "Censor word detector": [
      "Censor word detection",
      "censor_word_detection.py",
      "none",
      "none",
      "jeelnathani",
      "an application which can detect censor words."
    ]
  },
  "Cryptography": {
    "BitCoin Mining": [
      "BitCoin Mining",
      "BitCoin_Mining.py",
      "none",
      "none",
      "NEERAJAP2001",
      "A driver code with explains how BITCOIN is mined"
    ],
    "Caesar Cipher": [
      "Caesar-Cipher",
      "caesar_cipher.py",
      "none",
      "none",
      "smriti1313",
      "It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet."
    ],
    "Morse Code Translator": [
      "Morse_Code_Translator",
      "Morse_Code_Translator.py",
      "none",
      "none",
      "aishwaryachand",
      "Morse code is a method used in telecommunication to encode  text  characters as standardized sequences of two different signal durations, called _dots_ and _dashes_."
    ],
    "Steganography": [
      "Steganography",
      "steganography.py",
      "argv",
      "none",
      "dhriti987",
      "This Python Script Can hide text under image and can retrive from it with some simple commands"
    ],
    "CRYPTOGRAPHY": [
      "Cryptography",
      "crypto.py",
      "none",
      "none",
      "codebuzzer01",
      "The objective of this project is to encode and decode messages using a common key."
    ]
  },
  "Computer_Vision": {
    "Finger Counter using hand tracking": [
      "Finger-Counter",
      "finger_counter.py",
      "none",
      "requirements.txt",
      "mehabhalodiya",
      "A system that detects a human hand, segments the hand, counts the number of fingers being held up, and displays the finger count, from live video input."
    ],
    "Color Detection": [
      "Color_detection",
      "Color_detection.py",
      "none",
      "none",
      "deepshikha007",
      "In this color detection Python project, we are going to build an application through which you can automatically get the name of the color by clicking on them."
    ],
    "Contour Detection": [
      "Contour-Detection",
      "live_contour_det.py",
      "none",
      "none",
      "mehabhalodiya",
      "Contours can be explained simply as a curve joining all the continuous points (along the boundary), having same color or intensity."
    ],
    "Document Word Detection": [
      "Document-Word-Detection",
      "Word_detection.py",
      "none",
      "none",
      "hritik5102",
      "Detect a word present in the document (pages) using OpenCV"
    ],
    "Edge Detection": [
      "Edge Detection",
      "Edge_Detection.py",
      "none",
      "none",
      "ShubhamGupta577",
      "This script uses `OpenCV` for taking input and output for the image. In this we are using he `Canny algorithm` for the detection of the edge."
    ],
    "Eye Detection": [
      "Eye Detection",
      "eyes.py",
      "none",
      "none",
      "Avishake007",
      "It is going to detect your eyes and count the number of eyes"
    ],
    "Face Detection": [
      "Face-Detection",
      "face-detect.py",
      "none",
      "none",
      "Avishake007",
      "Face Detection script using Python Computer Vision"
    ],
    "Corner Detection": [
      "Fast Algorithm (Corner Detection)",
      "Fast_Algorithm.py",
      "none",
      "none",
      "ShubhamGupta577",
      "In this script, we implement the `Fast (Features from Accelerated Segment Test)` algorithm of `OpenCV` to detect the corners from any image."
    ],
    "Human Detection": [
      "Human-Detection",
      "script.py",
      "none",
      "none",
      "NChechulin",
      "Uses OpenCV to Detect Human using pre trained data."
    ],
    "Num Plate Detector": [
      "Num-Plate-Detector",
      "number_plate.py",
      "none",
      "none",
      "mehabhalodiya",
      "License plate of the vehicle is detected using various features of image processing library openCV and recognizing the text on the license plate using python tool named as tesseract."
    ],
    "Realtime Text Extraction": [
      "Realtime Text Extraction",
      "Realtime Text Extraction.py",
      "none",
      "none",
      "ShubhamGupta577",
      "In this script we are going to read a real-time captured image using a web cam or any other camera and extract the text from that image by removing noise from it."
    ],
    "Virtual Paint": [
      "Virtual Paint",
      "virtual_paint.py",
      "none",
      "none",
      "mehabhalodiya",
      "It is an OpenCV application that can track an object\u2019s movement, using which a user can draw on the screen by moving the object around."
    ],
    "ORB Algorithm": [
      "ORB Algorithm",
      "ORB_Algorithm.py",
      "none",
      "none",
      "ShubhamGupta577",
      "ORB Algorithm of `Open CV` for recognition and matching the features of image."
    ]
  },
  "Fun": {
    "Pygame-Buttons": [
      "Pygame-Buttons",
      "main.py",
      "none",
      "requirements.txt",
      "Lakhankumawat",
      " How to make design and animate buttons in python."
    ],
    "Spiral Star": [
      "Spiral-Star",
      "program1.py",
      "none",
      "none",
      "avinashkranjan",
      "This is python programs to create a spiral star and colourful spiral star using python"
    ],
    "Matrix Rain": [
      "Matrix-rain-code",
      "matrix-rain.py",
      "none",
      "none",
      "YashIndane",
      "Matrix Rain"
    ],
    "Github Bomb Issues": [
      "Github_Bomb_Issues",
      "bomb-issues.py",
      "none",
      "Github_Bomb_Issues/requirements.txt",
      "Ayush7614",
      "This python script bombs specified number of issues on a Github Repository."
    ],
    "Lyrics Genius API": [
      "Lyrics_Genius_API",
      "lyrics.py",
      "none",
      "none",
      "vybhav72954",
      "This script can be used to download lyrics of any number of songs, by any number of Artists, until the API Limit is met."
    ],
    "Songs by Artist": [
      "Songs-By-Artist",
      "songs_of_artist.py",
      "none",
      "none",
      "NChechulin",
      "A music search application, using a few named technologies that allows users to search for the songs of their favorite Artists in a very less time."
    ],
    "Beat_Board": [
      "Beat-Board",
      "beatBoard.py",
      "none",
      "requirements.txt",
      "albertzeap",
      "A small GUI program that allows the user to create custom sounds through mouse clicks or key presses."
    ]
  },
  "Others": {
    "Pwned or not": [
      "Pwned_or_not_GUI",
      "pwned_passwords_GUI.py",
      "none",
      "requirements.txt",
      "RohiniRG",
      "The python script helps users to know if their passwords were ever part of a data breach, and thus helping them stay aware and change their passwords accordingly. This information will be presented to users in a user-friendly GUI."
    ],
    "Bubble Sort Visualization": [
      "Bubble-Sort-Visualization",
      "bubble_sort.py",
      "none",
      "none",
      "amrzaki2000",
      "This is a script that provides easy simulation to bubble sort algorithm."
    ],
    "Select Stocks by volume Increase": [
      "Select Stocks by volume Increase",
      "script.py",
      "none",
      "none",
      "Amit366",
      "Select Stocks by volume Increase when provided by the number of days from the user."
    ],
    "ZIP Function": [
      "ZIP-Function",
      "transpose.py",
      "none",
      "none",
      "avinashkranjan",
      "function creates an iterator that will aggregate elements from two or more iterables."
    ],
    "Quiz GUI": [
      "Quiz-GUI",
      "quiztime.py",
      "none",
      "none",
      "soumyavemuri",
      "A quiz application created with Python's Tkinter GUI toolkit."
    ],
    "Dictionary GUI": [
      "Dictionary-GUI",
      "dictionary.py",
      "none",
      "Dictionary-GUI/requirements.txt",
      "Ayushjain2205",
      "This script lets the user search for the meaning of words like a dictionary."
    ],
    "Translator Script": [
      "Translator Script",
      "Translation.py",
      "none",
      "none",
      "NEERAJAP2001",
      "Running this Script would translate one language to another language"
    ],
    "Translator GUI": [
      "Translator-GUI",
      "translator.py",
      "none",
      "Translator-GUI/requirements.txt",
      "Ayushjain2205",
      "Running this Script would open up a translator with GUI which can be used to translate one language to another."
    ],
    "Gmplot Track the Route": [
      "Gmplot-Track the Route",
      "main.py",
      "none",
      "none",
      "Lakhankumawat",
      "track the whole route of a person by reading values of a provided CSV file on Google Maps and create an Image containing route or location."
    ],
    "Health Log Book": [
      "Health_Log_Book",
      "main.py",
      "none",
      "none",
      "anuragmukherjee2001",
      "The script will contain the daily records of food and workouts of a person."
    ],
    "Pagespeed API": [
      "Pagespeed-API",
      "test.py",
      "none",
      "none",
      "keshavbansal015",
      "This script generates the PageSpeed API results for a website."
    ],
    "String Matching Scripts": [
      "String-Matching-Scripts",
      "string_matching.py",
      "none",
      "none",
      "avinashkranjan",
      "an efficient way of string matching script."
    ],
    "Wikipedia Summary": [
      "Wikipedia-Summary-GUI",
      "summary.py",
      "none",
      "Wikipedia-Summary-GUI/requirements.txt",
      "Ayushjain2205",
      "Running this Script would open up a wikipedia summary generator GUI which can be used to get summary about any topic of the user's choice from wikipedia."
    ],
    "Expense Tracker": [
      "Expense Tracker",
      "script.py",
      "none",
      "none",
      "Amit366",
      "This is used to store the daily expenses."
    ],
    "Piglatin Translator": [
      "Piglatin_Translator",
      "piglatin.py",
      "none",
      "none",
      "archanagandhi",
      "A secret language formed from English by transferring the initial consonant or consonant cluster of each word to the end of the word and adding a vocalic syllable (usually /e\u026a/): so pig Latin would be igpay atinlay."
    ],
    "TODO CLI": [
      "TODO (CLI-VER)",
      "todolist.py",
      "none",
      "none",
      "Avishake007",
      "List down your items in a Todolist so that you don't forget"
    ],
    "Sentiment Detector": [
      "Script to check Sentiment",
      "script.py",
      "none",
      "none",
      "Amit366",
      "Sentiment Detector that checks sentiment in the provided sentence."
    ],
    "Linear Search Visualizer": [
      "Linear Search Visualizer",
      "script.py",
      "none",
      "none",
      "tanvi355",
      "A GUI that allows you to see the linear search in action."
    ]
  }
}
