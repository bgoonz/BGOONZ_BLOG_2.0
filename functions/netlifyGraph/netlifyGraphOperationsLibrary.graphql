fragment ExampleFragment on Query @netlify(id: """aba2cd73-c6e0-44b7-af0e-589b68c16663""", doc: """An empty fragment to start from""") {
  __typename
  oneGraphNode(oneGraphId: "") {
    oneGraphId
  }
}

fragment ExampleFragment on Query @netlify(id: """d006fed5-6ae6-48ee-ab0e-1093e621591b""", doc: """An empty fragment to start from""") {
  __typename
  emailNode(email: "")
  gitHub(
    auths: {airtableApiKey: "", brexAuth: "", clearbitAuth: "", dribbbleOAuthToken: "", crunchbaseUserKey: "", firebaseOAuthToken: "", gitHubOAuthToken: ""}
  ) {
    node {
      id
      ... on GitHubCommentDeletedEvent {
        id
      }
      ... on GitHubConvertToDraftEvent {
        id
      }
      ... on GitHubLabel {
        id
        name
      }
      ... on GitHubPullRequestReviewComment {
        id
      }
    }
    meta {
      gitHubServicesSha
    }
    nodes(ids: "") {
      id
      ... on GitHubTransferredEvent {
        id
      }
    }
    resource(url: "") {
      ... on GitHubPullRequest {
        id
      }
    }
    repositoryOwner(login: "") {
      id
    }
  }
}

mutation ExampleMutation @netlify(id: """1de006f1-f74d-4f48-a8e3-c9f291a77dbf""", doc: """An empty mutation to start from""") {
  npm(userIds: {adroll: ""})
}

mutation ExampleMutation @netlify(id: """ece09a28-266e-4f0a-b685-aa58180b14ee""", doc: """An empty mutation to start from""") {
  __typename
}

query ExampleQuery @netlify(id: """9d091d59-0d10-400f-8417-f171e588dfc2""", doc: """An example query to start with.""") {
  me(
    auths: {brexAuth: "", airtableApiKey: "", clearbitAuth: "", crunchbaseUserKey: "", cloudflareUserAuth: {key: "", email: ""}, dribbbleOAuthToken: "", dropboxOAuthToken: "", facebookOAuthToken: "", firebaseOAuthToken: "", gitHubOAuthToken: "", gmailOAuthToken: "", googleCalendarOAuthToken: "", gongAuth: {basic: {accessKeySecret: "", accessKey: ""}, oauthToken: ""}, googleComputeOAuthToken: "", googleMapsKey: "", googleDocsOAuthToken: "", googleOAuthToken: "", intercomOAuthToken: "", hubspotOAuthToken: "", googleSearchConsoleOAuthToken: "", zendeskAPITokenAuth: {token: "", email: "", subdomain: ""}, zeitOAuthToken: "", youtubeOAuthToken: "", wordpressBearerToken: "", upsAPIAuth: {accessToken: "", password: "", username: ""}, stripeOAuthToken: "", spotifyOAuthToken: "", slackOAuthToken: "", productHuntOAuthToken: "", openCollective: {apiKey: ""}, onegraphToken: "", graphCmsToken: "", googleTranslateOAuthToken: ""}
  ) {
    github {
      bio
      bioHTML
      company
      companyHTML
      createdAt
      email
      hasSponsorsListing
      isBountyHunter
      login
      name
      oneGraphId
      organizationVerifiedDomainEmails(login: "")
      url
      websiteUrl
    }
  }
  emailNode(email: "") {
    salesforceContact {
      assistantName
      accountId
    }
  }
  npm
  oneGraphNode(oneGraphId: "") {
    oneGraphId
    oneGraphLinkedNodes {
      nodes {
        oneGraphId
        ... on ApolloSequence {
          id
          name
        }
        ... on ApolloAccount {
          id
          name
        }
        ... on ApolloContact {
          id
          email
          lastName
        }
        ... on ApolloPerson {
          id
          email
          accountId
          city
          country
          emailStatus
        }
      }
    }
  }
  gitHub(
    auths: {airtableApiKey: "", clearbitAuth: "", crunchbaseUserKey: "", dribbbleOAuthToken: "", facebookOAuthToken: "", gitHubOAuthToken: "", gmailOAuthToken: "", gongAuth: {oauthToken: ""}, logdnaServiceAuth: {serviceKey: ""}, mixpanelApiSecret: "", productHuntOAuthToken: ""}
  ) {
    makeRestCall {
      get(path: "", accept: "", allowUnauthenticated: false, query: "") {
        jsonBody
        response {
          headers
          httpVersion
          rawBody(as: PLAIN)
          statusCode
        }
      }
    }
    search(query: "", type: ISSUE) {
      edges {
        node
      }
    }
    resource(url: "")
    repositoryOwner(login: "") {
      id
    }
    repository(name: "", owner: "") {
      autoMergeAllowed
      branchProtectionRules(after: "", before: "", first: 10, last: 10) {
        totalCount
        edges {
          cursor
          node {
            allowsDeletions
            allowsForcePushes
            creator {
              avatarUrl(size: 10)
              login
              resourcePath
              url
              ... on GitHubUser {
                id
                email
                bioHTML
                commitComments(after: "", before: "", last: 10) {
                  edges {
                    cursor
                  }
                }
                company
                companyHTML
                createdAt
                databaseId
                followers(after: "", last: 10, first: 10, before: "") {
                  totalCount
                  edges {
                    cursor
                  }
                }
                login
                issues {
                  edges {
                    node {
                      id
                    }
                  }
                }
              }
              ... on GitHubBot {
                id
                avatarUrl
                login
                oneGraphId
              }
            }
          }
        }
      }
    }
  }
}

subscription ExampleSubscription @netlify(id: """f288b991-1f62-494f-84de-73c7ca70fc77""", doc: """An empty subscription to start from""") {
  github {
    deploymentEvent(input: {repoOwner: "", repoName: ""}) {
      deployment {
        state
        repository {
          commitComments {
            edges {
              node {
                id
              }
            }
          }
        }
        commit {
          changedFiles
          status {
            id
          }
          message
        }
      }
    }
    createEvent(input: {repoOwner: "", repoName: ""}) {
      sender {
        url
      }
    }
  }
}

mutation GitHubCreateBranchMutation($repoOwner: String!, $repoName: String!, $branchName: String!) @netlify(id: """46dc2275-dee5-4c75-9b95-e2003bd52e0d""", doc: """Create a branch name `$branchName` (from `master`) on the GitHub project `${repoOwner}/${repoName}`""") {
  gitHub {
    createBranch_oneGraph(
      input: {branchName: $branchName, repoName: $repoName, repoOwner: $repoOwner}
    ) {
      ref_: ref {
        name
        id
      }
    }
  }
}

mutation GitHubUpsertFileMutation($owner: String!, $name: String!, $branch: String!, $path: String!, $message: String!, $content: String!, $sha: String!) @netlify(id: """c0a4e2e1-abfc-4d6c-be4f-c7b76b56400a""", doc: """
Create a single commit on the GitHub project `${repoOwner}/${repoName}` that "upserts" (creates a new file if it doesn'texist, or updates it if it does).

For example, to add a new file "/examples/MyExample.md" to the [OneGraph GraphQL Docs Repository](https://github.comnetlify/labs/tree/main/src/NetlifyGraph.md), the following variables would work:

```javascript
{
  "repoOwner": "netlify",
  "repoName": "labs",
  "branchName": "main",
  "path": "src/NetlifyGraph.md",
  "message": "Your git commit message here",
  "content": "The content of the file here",
  "sha": null
}
```

Note that if you're _updating_ a file, you'll need to provide its *current* `sha` for the mutation to succeed. See theGitHubGetFileShaAndContent example for how to find an existing file's sha.
""") {
  gitHub {
    createOrUpdateFileContent: createOrUpdateFileContent_oneGraph(
      input: {message: $message, path: $path, repoName: $name, repoOwner: $owner, branchName: $branch, plainContent: $content, existingFileSha: $sha}
    ) {
      commit {
        message
      }
    }
  }
}
